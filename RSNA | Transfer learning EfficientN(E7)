{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "48965b97",
   "metadata": {
    "papermill": {
     "duration": 0.002135,
     "end_time": "2025-10-14T23:09:15.325354",
     "exception": false,
     "start_time": "2025-10-14T23:09:15.323219",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1. Import packages and setup environment (CPU/GPU/TPU)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "55c9e858",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-14T23:09:15.330817Z",
     "iopub.status.busy": "2025-10-14T23:09:15.330350Z",
     "iopub.status.idle": "2025-10-15T00:36:55.939153Z",
     "shell.execute_reply": "2025-10-15T00:36:55.938367Z"
    },
    "papermill": {
     "duration": 5262.202825,
     "end_time": "2025-10-15T00:36:57.529911",
     "exception": false,
     "start_time": "2025-10-14T23:09:15.327086",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-10-14 23:09:17.038454: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1760483357.228048      18 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1760483357.289278      18 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "I0000 00:00:1760483370.728030      18 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "❌ Using CPU/GPU\n",
      "REPLICAS:  1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_split.py:909: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=10.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ Fold 0: Train size = 4264, Val size = 475\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 84%|████████▍ | 3585/4264 [04:59<00:48, 13.94it/s]/usr/local/lib/python3.11/dist-packages/pydicom/pixels/utils.py:222: UserWarning: A value of 'None' for (0028,0008) 'Number of Frames' is invalid, assuming 1 frame\n",
      "  warn_and_log(\n",
      "100%|██████████| 4264/4264 [06:14<00:00, 11.39it/s]\n",
      " 84%|████████▍ | 3585/4264 [04:37<00:51, 13.31it/s]/usr/local/lib/python3.11/dist-packages/pydicom/pixels/utils.py:222: UserWarning: A value of 'None' for (0028,0008) 'Number of Frames' is invalid, assuming 1 frame\n",
      "  warn_and_log(\n",
      "100%|██████████| 4264/4264 [05:29<00:00, 12.95it/s]\n",
      " 84%|████████▍ | 3585/4264 [04:37<00:51, 13.26it/s]/usr/local/lib/python3.11/dist-packages/pydicom/pixels/utils.py:222: UserWarning: A value of 'None' for (0028,0008) 'Number of Frames' is invalid, assuming 1 frame\n",
      "  warn_and_log(\n",
      "100%|██████████| 4264/4264 [05:29<00:00, 12.93it/s]\n",
      " 84%|████████▍ | 3585/4264 [04:34<00:49, 13.59it/s]/usr/local/lib/python3.11/dist-packages/pydicom/pixels/utils.py:222: UserWarning: A value of 'None' for (0028,0008) 'Number of Frames' is invalid, assuming 1 frame\n",
      "  warn_and_log(\n",
      "100%|██████████| 4264/4264 [05:27<00:00, 13.02it/s]\n",
      "100%|██████████| 475/475 [00:49<00:00,  9.66it/s]\n",
      "100%|██████████| 475/475 [00:35<00:00, 13.23it/s]\n",
      "100%|██████████| 475/475 [00:36<00:00, 12.98it/s]\n",
      "100%|██████████| 475/475 [00:36<00:00, 13.02it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of elements in train images: 310152704\n",
      "Size of each element in train images: 1 bytes\n",
      "Total memory size of train images: 0.29 GB\n",
      "(32, 300, 300, 3) <dtype: 'uint8'>\n",
      "(32, 2)\n",
      "(32, 14)\n",
      "(32, 2)\n",
      "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/efficientnet_v2/efficientnetv2-b0_notop.h5\n",
      "\u001b[1m24274472/24274472\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n",
      "Unfreeze base model layers from layer <InputLayer name=input_layer, built=True>\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"RSNA_Class\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"RSNA_Class\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                   </span>┃<span style=\"font-weight: bold\"> Output Shape              </span>┃<span style=\"font-weight: bold\">          Param # </span>┃<span style=\"font-weight: bold\"> Connected to               </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ input_img (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">300</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">300</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)       │                <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ rescaling (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Rescale</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">300</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">300</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)       │                <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ input_img[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ preprocessing (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">PreProcess</span>)     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">300</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">300</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)       │                <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ rescaling[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ efficientnetv2-b0 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1280</span>)      │        <span style=\"color: #00af00; text-decoration-color: #00af00\">5,919,312</span> │ preprocessing[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ gap2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling2D</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1280</span>)              │                <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ efficientnetv2-b0[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ gap2d_bn (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1280</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">5,120</span> │ gap2d[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]                │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ gap2d_do (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1280</span>)              │                <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ gap2d_bn[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]             │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ input_mod (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │                <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                          │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ concat_gap (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Concatenate</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1282</span>)              │                <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ gap2d_do[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>],            │\n",
       "│                                │                           │                  │ input_mod[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ final_fc1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)               │          <span style=\"color: #00af00; text-decoration-color: #00af00\">656,896</span> │ concat_gap[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]           │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ final_bn1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)               │            <span style=\"color: #00af00; text-decoration-color: #00af00\">2,048</span> │ final_fc1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ final_fc_reg1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)               │          <span style=\"color: #00af00; text-decoration-color: #00af00\">328,448</span> │ concat_gap[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]           │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ final_do1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)               │                <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ final_bn1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ final_do_reg1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)               │                <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ final_fc_reg1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ class (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>)                │            <span style=\"color: #00af00; text-decoration-color: #00af00\">7,182</span> │ final_do1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]            │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ reg (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                 │              <span style=\"color: #00af00; text-decoration-color: #00af00\">514</span> │ final_do_reg1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]        │\n",
       "└────────────────────────────────┴───────────────────────────┴──────────────────┴────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                  \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape             \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m         Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to              \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│ input_img (\u001b[38;5;33mInputLayer\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m300\u001b[0m, \u001b[38;5;34m300\u001b[0m, \u001b[38;5;34m3\u001b[0m)       │                \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ rescaling (\u001b[38;5;33mRescale\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m300\u001b[0m, \u001b[38;5;34m300\u001b[0m, \u001b[38;5;34m3\u001b[0m)       │                \u001b[38;5;34m0\u001b[0m │ input_img[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ preprocessing (\u001b[38;5;33mPreProcess\u001b[0m)     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m300\u001b[0m, \u001b[38;5;34m300\u001b[0m, \u001b[38;5;34m3\u001b[0m)       │                \u001b[38;5;34m0\u001b[0m │ rescaling[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ efficientnetv2-b0 (\u001b[38;5;33mFunctional\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m1280\u001b[0m)      │        \u001b[38;5;34m5,919,312\u001b[0m │ preprocessing[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ gap2d (\u001b[38;5;33mGlobalAveragePooling2D\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1280\u001b[0m)              │                \u001b[38;5;34m0\u001b[0m │ efficientnetv2-b0[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ gap2d_bn (\u001b[38;5;33mBatchNormalization\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1280\u001b[0m)              │            \u001b[38;5;34m5,120\u001b[0m │ gap2d[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]                │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ gap2d_do (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1280\u001b[0m)              │                \u001b[38;5;34m0\u001b[0m │ gap2d_bn[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]             │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ input_mod (\u001b[38;5;33mInputLayer\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │                \u001b[38;5;34m0\u001b[0m │ -                          │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ concat_gap (\u001b[38;5;33mConcatenate\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1282\u001b[0m)              │                \u001b[38;5;34m0\u001b[0m │ gap2d_do[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m],            │\n",
       "│                                │                           │                  │ input_mod[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ final_fc1 (\u001b[38;5;33mDense\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)               │          \u001b[38;5;34m656,896\u001b[0m │ concat_gap[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]           │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ final_bn1 (\u001b[38;5;33mBatchNormalization\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)               │            \u001b[38;5;34m2,048\u001b[0m │ final_fc1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ final_fc_reg1 (\u001b[38;5;33mDense\u001b[0m)          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)               │          \u001b[38;5;34m328,448\u001b[0m │ concat_gap[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]           │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ final_do1 (\u001b[38;5;33mDropout\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)               │                \u001b[38;5;34m0\u001b[0m │ final_bn1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ final_do_reg1 (\u001b[38;5;33mDropout\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)               │                \u001b[38;5;34m0\u001b[0m │ final_fc_reg1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ class (\u001b[38;5;33mDense\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m)                │            \u001b[38;5;34m7,182\u001b[0m │ final_do1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]            │\n",
       "├────────────────────────────────┼───────────────────────────┼──────────────────┼────────────────────────────┤\n",
       "│ reg (\u001b[38;5;33mDense\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)                 │              \u001b[38;5;34m514\u001b[0m │ final_do_reg1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]        │\n",
       "└────────────────────────────────┴───────────────────────────┴──────────────────┴────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">6,919,520</span> (26.40 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m6,919,520\u001b[0m (26.40 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">6,855,328</span> (26.15 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m6,855,328\u001b[0m (26.15 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">64,192</span> (250.75 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m64,192\u001b[0m (250.75 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1760484970.732398      55 service.cc:148] XLA service 0x3ba92390 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1760484970.733426      55 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1760484976.440990      55 cuda_dnn.cc:529] Loaded cuDNN version 90300\n",
      "E0000 00:00:1760484987.895007      55 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\n",
      "E0000 00:00:1760484988.085724      55 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\n",
      "E0000 00:00:1760484988.617953      55 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\n",
      "E0000 00:00:1760484988.824489      55 gpu_timer.cc:82] Delay kernel timed out: measured time has sub-optimal accuracy. There may be a missing warmup execution, please investigate in Nsight Systems.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m  1/533\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m15:40:54\u001b[0m 106s/step - class_auc: 0.3775 - class_loss: 0.0238 - loss: 0.0641 - reg_loss: 4.0503 - reg_mae: 1.6810"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "I0000 00:00:1760485011.259775      55 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m186s\u001b[0m 150ms/step - class_auc: 0.7991 - class_loss: 0.0095 - loss: 0.0193 - reg_loss: 0.9907 - reg_mae: 0.6901 - val_class_auc: 0.8373 - val_class_loss: 0.0166 - val_loss: 0.0198 - val_reg_loss: 0.3362 - val_reg_mae: 0.3458 - learning_rate: 0.0010\n",
      "Epoch 2/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.8356 - class_loss: 0.0083 - loss: 0.0115 - reg_loss: 0.3292 - reg_mae: 0.4191 - val_class_auc: 0.8407 - val_class_loss: 0.0092 - val_loss: 0.0116 - val_reg_loss: 0.2454 - val_reg_mae: 0.2967 - learning_rate: 0.0010\n",
      "Epoch 3/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.8344 - class_loss: 0.0084 - loss: 0.0111 - reg_loss: 0.2766 - reg_mae: 0.3789 - val_class_auc: 0.8181 - val_class_loss: 0.0208 - val_loss: 0.0920 - val_reg_loss: 7.1454 - val_reg_mae: 0.7833 - learning_rate: 0.0010\n",
      "Epoch 4/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.8458 - class_loss: 0.0080 - loss: 0.0101 - reg_loss: 0.2135 - reg_mae: 0.3245 - val_class_auc: 0.8570 - val_class_loss: 0.0153 - val_loss: 0.0179 - val_reg_loss: 0.2669 - val_reg_mae: 0.2413 - learning_rate: 0.0010\n",
      "Epoch 5/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.8633 - class_loss: 0.0072 - loss: 0.0090 - reg_loss: 0.1869 - reg_mae: 0.2942 - val_class_auc: 0.8689 - val_class_loss: 0.0113 - val_loss: 0.0134 - val_reg_loss: 0.2248 - val_reg_mae: 0.2216 - learning_rate: 0.0010\n",
      "Epoch 6/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.8769 - class_loss: 0.0062 - loss: 0.0078 - reg_loss: 0.1622 - reg_mae: 0.2629 - val_class_auc: 0.8665 - val_class_loss: 0.0134 - val_loss: 0.0212 - val_reg_loss: 0.7935 - val_reg_mae: 0.3701 - learning_rate: 0.0010\n",
      "Epoch 7/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.8836 - class_loss: 0.0060 - loss: 0.0074 - reg_loss: 0.1511 - reg_mae: 0.2496 - val_class_auc: 0.8519 - val_class_loss: 0.0158 - val_loss: 0.0183 - val_reg_loss: 0.2657 - val_reg_mae: 0.2272 - learning_rate: 0.0010\n",
      "Epoch 8/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.8799 - class_loss: 0.0061 - loss: 0.0076 - reg_loss: 0.1564 - reg_mae: 0.2555 - val_class_auc: 0.8802 - val_class_loss: 0.0126 - val_loss: 0.0148 - val_reg_loss: 0.2340 - val_reg_mae: 0.2168 - learning_rate: 0.0010\n",
      "Epoch 9/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.8956 - class_loss: 0.0052 - loss: 0.0064 - reg_loss: 0.1284 - reg_mae: 0.2202 - val_class_auc: 0.8836 - val_class_loss: 0.0111 - val_loss: 0.0130 - val_reg_loss: 0.2048 - val_reg_mae: 0.2148 - learning_rate: 0.0010\n",
      "Epoch 10/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.8982 - class_loss: 0.0051 - loss: 0.0063 - reg_loss: 0.1250 - reg_mae: 0.2225 - val_class_auc: 0.8708 - val_class_loss: 0.0148 - val_loss: 0.0172 - val_reg_loss: 0.2513 - val_reg_mae: 0.2421 - learning_rate: 0.0010\n",
      "Epoch 11/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.9063 - class_loss: 0.0045 - loss: 0.0055 - reg_loss: 0.1082 - reg_mae: 0.2051 - val_class_auc: 0.8730 - val_class_loss: 0.0259 - val_loss: 0.0314 - val_reg_loss: 0.5811 - val_reg_mae: 0.5178 - learning_rate: 0.0010\n",
      "Epoch 12/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.9062 - class_loss: 0.0043 - loss: 0.0053 - reg_loss: 0.1028 - reg_mae: 0.1975 - val_class_auc: 0.8719 - val_class_loss: 0.0146 - val_loss: 0.0168 - val_reg_loss: 0.2371 - val_reg_mae: 0.2141 - learning_rate: 0.0010\n",
      "Epoch 13/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.9014 - class_loss: 0.0047 - loss: 0.0057 - reg_loss: 0.1110 - reg_mae: 0.2057 - val_class_auc: 0.8847 - val_class_loss: 0.0124 - val_loss: 0.0148 - val_reg_loss: 0.2515 - val_reg_mae: 0.2248 - learning_rate: 0.0010\n",
      "Epoch 14/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9125 - class_loss: 0.0041 - loss: 0.0050 - reg_loss: 0.0950 - reg_mae: 0.1907 - val_class_auc: 0.8733 - val_class_loss: 0.0207 - val_loss: 0.0247 - val_reg_loss: 0.4178 - val_reg_mae: 0.3965 - learning_rate: 0.0010\n",
      "Epoch 15/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9114 - class_loss: 0.0040 - loss: 0.0049 - reg_loss: 0.0930 - reg_mae: 0.1918 - val_class_auc: 0.8699 - val_class_loss: 0.0121 - val_loss: 0.0148 - val_reg_loss: 0.2860 - val_reg_mae: 0.2664 - learning_rate: 0.0010\n",
      "Epoch 16/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9116 - class_loss: 0.0040 - loss: 0.0049 - reg_loss: 0.0983 - reg_mae: 0.1973 - val_class_auc: 0.8634 - val_class_loss: 0.0164 - val_loss: 0.0187 - val_reg_loss: 0.2546 - val_reg_mae: 0.2132 - learning_rate: 0.0010\n",
      "Epoch 17/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9190 - class_loss: 0.0036 - loss: 0.0044 - reg_loss: 0.0841 - reg_mae: 0.1779 - val_class_auc: 0.8747 - val_class_loss: 0.0167 - val_loss: 0.0228 - val_reg_loss: 0.6276 - val_reg_mae: 0.3310 - learning_rate: 0.0010\n",
      "Epoch 18/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9274 - class_loss: 0.0028 - loss: 0.0034 - reg_loss: 0.0592 - reg_mae: 0.1480 - val_class_auc: 0.8882 - val_class_loss: 0.0117 - val_loss: 0.0138 - val_reg_loss: 0.2216 - val_reg_mae: 0.2009 - learning_rate: 0.0010\n",
      "Epoch 19/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9319 - class_loss: 0.0025 - loss: 0.0029 - reg_loss: 0.0486 - reg_mae: 0.1339 - val_class_auc: 0.8928 - val_class_loss: 0.0118 - val_loss: 0.0139 - val_reg_loss: 0.2207 - val_reg_mae: 0.2053 - learning_rate: 0.0010\n",
      "Epoch 20/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9312 - class_loss: 0.0027 - loss: 0.0032 - reg_loss: 0.0586 - reg_mae: 0.1500 - val_class_auc: 0.8679 - val_class_loss: 0.0187 - val_loss: 0.0221 - val_reg_loss: 0.3540 - val_reg_mae: 0.3517 - learning_rate: 0.0010\n",
      "Epoch 21/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 132ms/step - class_auc: 0.9232 - class_loss: 0.0035 - loss: 0.0043 - reg_loss: 0.0832 - reg_mae: 0.1745 - val_class_auc: 0.8669 - val_class_loss: 0.0166 - val_loss: 0.0189 - val_reg_loss: 0.2519 - val_reg_mae: 0.2319 - learning_rate: 0.0010\n",
      "Epoch 22/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9363 - class_loss: 0.0024 - loss: 0.0029 - reg_loss: 0.0490 - reg_mae: 0.1371 - val_class_auc: 0.8906 - val_class_loss: 0.0120 - val_loss: 0.0141 - val_reg_loss: 0.2250 - val_reg_mae: 0.2184 - learning_rate: 0.0010\n",
      "Epoch 23/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9380 - class_loss: 0.0022 - loss: 0.0027 - reg_loss: 0.0462 - reg_mae: 0.1358 - val_class_auc: 0.8832 - val_class_loss: 0.0133 - val_loss: 0.0155 - val_reg_loss: 0.2341 - val_reg_mae: 0.2212 - learning_rate: 0.0010\n",
      "Epoch 24/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.9383 - class_loss: 0.0022 - loss: 0.0027 - reg_loss: 0.0442 - reg_mae: 0.1293 - val_class_auc: 0.8949 - val_class_loss: 0.0113 - val_loss: 0.0142 - val_reg_loss: 0.3007 - val_reg_mae: 0.2572 - learning_rate: 0.0010\n",
      "Epoch 25/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9417 - class_loss: 0.0023 - loss: 0.0027 - reg_loss: 0.0429 - reg_mae: 0.1255 - val_class_auc: 0.8914 - val_class_loss: 0.0122 - val_loss: 0.0142 - val_reg_loss: 0.2189 - val_reg_mae: 0.2016 - learning_rate: 0.0010\n",
      "Epoch 26/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 132ms/step - class_auc: 0.9403 - class_loss: 0.0023 - loss: 0.0027 - reg_loss: 0.0452 - reg_mae: 0.1331 - val_class_auc: 0.8852 - val_class_loss: 0.0132 - val_loss: 0.0155 - val_reg_loss: 0.2407 - val_reg_mae: 0.2122 - learning_rate: 0.0010\n",
      "Epoch 27/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.9417 - class_loss: 0.0019 - loss: 0.0023 - reg_loss: 0.0371 - reg_mae: 0.1178 - val_class_auc: 0.8945 - val_class_loss: 0.0127 - val_loss: 0.0153 - val_reg_loss: 0.2742 - val_reg_mae: 0.2502 - learning_rate: 0.0010\n",
      "Epoch 28/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 132ms/step - class_auc: 0.9437 - class_loss: 0.0022 - loss: 0.0026 - reg_loss: 0.0458 - reg_mae: 0.1360 - val_class_auc: 0.8637 - val_class_loss: 0.0169 - val_loss: 0.0189 - val_reg_loss: 0.2233 - val_reg_mae: 0.2333 - learning_rate: 0.0010\n",
      "Epoch 29/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 128ms/step - class_auc: 0.9417 - class_loss: 0.0024 - loss: 0.0029 - reg_loss: 0.0508 - reg_mae: 0.1403\n",
      "Epoch 29: ReduceLROnPlateau reducing learning rate to 0.00020000000949949026.\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 132ms/step - class_auc: 0.9417 - class_loss: 0.0024 - loss: 0.0029 - reg_loss: 0.0508 - reg_mae: 0.1403 - val_class_auc: 0.8906 - val_class_loss: 0.0137 - val_loss: 0.0158 - val_reg_loss: 0.2189 - val_reg_mae: 0.1940 - learning_rate: 0.0010\n",
      "Epoch 30/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9536 - class_loss: 0.0018 - loss: 0.0021 - reg_loss: 0.0275 - reg_mae: 0.0998 - val_class_auc: 0.9041 - val_class_loss: 0.0103 - val_loss: 0.0120 - val_reg_loss: 0.1803 - val_reg_mae: 0.1748 - learning_rate: 2.0000e-04\n",
      "Epoch 31/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 132ms/step - class_auc: 0.9580 - class_loss: 0.0013 - loss: 0.0014 - reg_loss: 0.0164 - reg_mae: 0.0844 - val_class_auc: 0.9026 - val_class_loss: 0.0105 - val_loss: 0.0121 - val_reg_loss: 0.1713 - val_reg_mae: 0.1687 - learning_rate: 2.0000e-04\n",
      "Epoch 32/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9597 - class_loss: 0.0012 - loss: 0.0013 - reg_loss: 0.0123 - reg_mae: 0.0771 - val_class_auc: 0.9019 - val_class_loss: 0.0110 - val_loss: 0.0127 - val_reg_loss: 0.1799 - val_reg_mae: 0.1805 - learning_rate: 2.0000e-04\n",
      "Epoch 33/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 132ms/step - class_auc: 0.9614 - class_loss: 0.0011 - loss: 0.0012 - reg_loss: 0.0115 - reg_mae: 0.0746 - val_class_auc: 0.8993 - val_class_loss: 0.0117 - val_loss: 0.0133 - val_reg_loss: 0.1730 - val_reg_mae: 0.1823 - learning_rate: 2.0000e-04\n",
      "Epoch 34/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 132ms/step - class_auc: 0.9632 - class_loss: 0.0011 - loss: 0.0012 - reg_loss: 0.0102 - reg_mae: 0.0712 - val_class_auc: 0.8984 - val_class_loss: 0.0114 - val_loss: 0.0129 - val_reg_loss: 0.1665 - val_reg_mae: 0.1636 - learning_rate: 2.0000e-04\n",
      "Epoch 35/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 128ms/step - class_auc: 0.9658 - class_loss: 0.0011 - loss: 0.0011 - reg_loss: 0.0101 - reg_mae: 0.0711\n",
      "Epoch 35: ReduceLROnPlateau reducing learning rate to 4.0000001899898055e-05.\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 132ms/step - class_auc: 0.9658 - class_loss: 0.0011 - loss: 0.0011 - reg_loss: 0.0101 - reg_mae: 0.0711 - val_class_auc: 0.8929 - val_class_loss: 0.0130 - val_loss: 0.0145 - val_reg_loss: 0.1699 - val_reg_mae: 0.1655 - learning_rate: 2.0000e-04\n",
      "Epoch 36/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.9665 - class_loss: 0.0011 - loss: 0.0012 - reg_loss: 0.0115 - reg_mae: 0.0732 - val_class_auc: 0.9047 - val_class_loss: 0.0098 - val_loss: 0.0111 - val_reg_loss: 0.1439 - val_reg_mae: 0.1481 - learning_rate: 4.0000e-05\n",
      "Epoch 37/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.9679 - class_loss: 0.0010 - loss: 0.0011 - reg_loss: 0.0089 - reg_mae: 0.0674 - val_class_auc: 0.9031 - val_class_loss: 0.0113 - val_loss: 0.0127 - val_reg_loss: 0.1534 - val_reg_mae: 0.1537 - learning_rate: 4.0000e-05\n",
      "Epoch 38/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.9690 - class_loss: 9.6638e-04 - loss: 0.0010 - reg_loss: 0.0079 - reg_mae: 0.0642 - val_class_auc: 0.9052 - val_class_loss: 0.0101 - val_loss: 0.0114 - val_reg_loss: 0.1403 - val_reg_mae: 0.1432 - learning_rate: 4.0000e-05\n",
      "Epoch 39/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9690 - class_loss: 9.8944e-04 - loss: 0.0011 - reg_loss: 0.0088 - reg_mae: 0.0663 - val_class_auc: 0.9063 - val_class_loss: 0.0099 - val_loss: 0.0112 - val_reg_loss: 0.1413 - val_reg_mae: 0.1469 - learning_rate: 4.0000e-05\n",
      "Epoch 40/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9687 - class_loss: 9.7043e-04 - loss: 0.0010 - reg_loss: 0.0081 - reg_mae: 0.0655 - val_class_auc: 0.9065 - val_class_loss: 0.0100 - val_loss: 0.0113 - val_reg_loss: 0.1403 - val_reg_mae: 0.1436 - learning_rate: 4.0000e-05\n",
      "Epoch 41/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9694 - class_loss: 9.6366e-04 - loss: 0.0010 - reg_loss: 0.0080 - reg_mae: 0.0652 - val_class_auc: 0.9026 - val_class_loss: 0.0110 - val_loss: 0.0124 - val_reg_loss: 0.1501 - val_reg_mae: 0.1533 - learning_rate: 4.0000e-05\n",
      "Epoch 42/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.9707 - class_loss: 9.3497e-04 - loss: 0.0010 - reg_loss: 0.0076 - reg_mae: 0.0640 - val_class_auc: 0.9024 - val_class_loss: 0.0112 - val_loss: 0.0126 - val_reg_loss: 0.1510 - val_reg_mae: 0.1513 - learning_rate: 4.0000e-05\n",
      "Epoch 43/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 132ms/step - class_auc: 0.9715 - class_loss: 9.4737e-04 - loss: 0.0010 - reg_loss: 0.0087 - reg_mae: 0.0656 - val_class_auc: 0.9050 - val_class_loss: 0.0103 - val_loss: 0.0116 - val_reg_loss: 0.1422 - val_reg_mae: 0.1473 - learning_rate: 4.0000e-05\n",
      "Epoch 44/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 132ms/step - class_auc: 0.9718 - class_loss: 9.2310e-04 - loss: 9.8772e-04 - reg_loss: 0.0074 - reg_mae: 0.0630 - val_class_auc: 0.9002 - val_class_loss: 0.0120 - val_loss: 0.0134 - val_reg_loss: 0.1556 - val_reg_mae: 0.1550 - learning_rate: 4.0000e-05\n",
      "Epoch 45/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 129ms/step - class_auc: 0.9726 - class_loss: 8.9553e-04 - loss: 9.6174e-04 - reg_loss: 0.0075 - reg_mae: 0.0633\n",
      "Epoch 45: ReduceLROnPlateau reducing learning rate to 8.000000525498762e-06.\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9726 - class_loss: 8.9551e-04 - loss: 9.6171e-04 - reg_loss: 0.0075 - reg_mae: 0.0633 - val_class_auc: 0.9006 - val_class_loss: 0.0116 - val_loss: 0.0129 - val_reg_loss: 0.1478 - val_reg_mae: 0.1476 - learning_rate: 4.0000e-05\n",
      "Epoch 46/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 133ms/step - class_auc: 0.9732 - class_loss: 9.1785e-04 - loss: 9.8685e-04 - reg_loss: 0.0078 - reg_mae: 0.0631 - val_class_auc: 0.9039 - val_class_loss: 0.0108 - val_loss: 0.0121 - val_reg_loss: 0.1399 - val_reg_mae: 0.1415 - learning_rate: 8.0000e-06\n",
      "Epoch 47/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9731 - class_loss: 9.0530e-04 - loss: 9.7057e-04 - reg_loss: 0.0074 - reg_mae: 0.0622 - val_class_auc: 0.9008 - val_class_loss: 0.0122 - val_loss: 0.0135 - val_reg_loss: 0.1424 - val_reg_mae: 0.1431 - learning_rate: 8.0000e-06\n",
      "Epoch 48/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 132ms/step - class_auc: 0.9738 - class_loss: 8.9918e-04 - loss: 9.6260e-04 - reg_loss: 0.0072 - reg_mae: 0.0627 - val_class_auc: 0.9052 - val_class_loss: 0.0104 - val_loss: 0.0117 - val_reg_loss: 0.1395 - val_reg_mae: 0.1415 - learning_rate: 8.0000e-06\n",
      "Epoch 49/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m70s\u001b[0m 132ms/step - class_auc: 0.9732 - class_loss: 8.9942e-04 - loss: 9.6244e-04 - reg_loss: 0.0072 - reg_mae: 0.0620 - val_class_auc: 0.9046 - val_class_loss: 0.0103 - val_loss: 0.0116 - val_reg_loss: 0.1383 - val_reg_mae: 0.1405 - learning_rate: 8.0000e-06\n",
      "Epoch 50/50\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 129ms/step - class_auc: 0.9739 - class_loss: 8.8208e-04 - loss: 9.4294e-04 - reg_loss: 0.0070 - reg_mae: 0.0619\n",
      "Epoch 50: ReduceLROnPlateau reducing learning rate to 1.6000001778593287e-06.\n",
      "\u001b[1m533/533\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m71s\u001b[0m 132ms/step - class_auc: 0.9739 - class_loss: 8.8206e-04 - loss: 9.4292e-04 - reg_loss: 0.0070 - reg_mae: 0.0619 - val_class_auc: 0.9052 - val_class_loss: 0.0100 - val_loss: 0.0113 - val_reg_loss: 0.1374 - val_reg_mae: 0.1398 - learning_rate: 8.0000e-06\n",
      "Epoch 50: early stopping\n",
      "Restoring model weights from the end of the best epoch: 40.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "▶️ Running inference gateway to generate submission.parquet ...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/kaggle/input/rsna-intracranial-aneurysm-detection/kaggle_evaluation/core/templates.py:97: RuntimeWarning: 5181 seconds elapsed before server startup.\n",
      "                This exceeds the startup time limit of 900 seconds that the gateway will enforce\n",
      "                during the rerun on the hidden test set. Start the server before performing any time consuming steps.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✅ submission.parquet generated: /kaggle/working/submission.parquet\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 15)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>SeriesInstanceUID</th><th>Left Infraclinoid Internal Carotid Artery</th><th>Right Infraclinoid Internal Carotid Artery</th><th>Left Supraclinoid Internal Carotid Artery</th><th>Right Supraclinoid Internal Carotid Artery</th><th>Left Middle Cerebral Artery</th><th>Right Middle Cerebral Artery</th><th>Anterior Communicating Artery</th><th>Left Anterior Cerebral Artery</th><th>Right Anterior Cerebral Artery</th><th>Left Posterior Communicating Artery</th><th>Right Posterior Communicating Artery</th><th>Basilar Tip</th><th>Other Posterior Circulation</th><th>Aneurysm Present</th></tr><tr><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;1.2.826.0.1.3680043.8.498.1002…</td><td>0.404399</td><td>0.542979</td><td>0.802661</td><td>0.68644</td><td>0.922643</td><td>0.959473</td><td>0.671608</td><td>0.582397</td><td>0.577569</td><td>0.654491</td><td>0.543882</td><td>0.611672</td><td>0.406926</td><td>0.999632</td></tr><tr><td>&quot;1.2.826.0.1.3680043.8.498.1005…</td><td>0.73273</td><td>0.652806</td><td>0.856815</td><td>0.780628</td><td>0.776043</td><td>0.819839</td><td>0.539608</td><td>0.780032</td><td>0.812369</td><td>0.658585</td><td>0.753165</td><td>0.739615</td><td>0.308672</td><td>0.995623</td></tr><tr><td>&quot;1.2.826.0.1.3680043.8.498.1007…</td><td>0.0172</td><td>0.043095</td><td>0.023021</td><td>0.055859</td><td>0.204</td><td>0.22448</td><td>0.102701</td><td>0.031578</td><td>0.063434</td><td>0.043905</td><td>0.034771</td><td>0.183065</td><td>0.060077</td><td>0.044316</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 15)\n",
       "┌───────────┬───────────┬───────────┬───────────┬───┬───────────┬───────────┬───────────┬──────────┐\n",
       "│ SeriesIns ┆ Left Infr ┆ Right Inf ┆ Left Supr ┆ … ┆ Right     ┆ Basilar   ┆ Other     ┆ Aneurysm │\n",
       "│ tanceUID  ┆ aclinoid  ┆ raclinoid ┆ aclinoid  ┆   ┆ Posterior ┆ Tip       ┆ Posterior ┆ Present  │\n",
       "│ ---       ┆ Internal  ┆ Internal  ┆ Internal  ┆   ┆ Communica ┆ ---       ┆ Circulati ┆ ---      │\n",
       "│ str       ┆ Car…      ┆ Ca…       ┆ Car…      ┆   ┆ ting …    ┆ f64       ┆ on        ┆ f64      │\n",
       "│           ┆ ---       ┆ ---       ┆ ---       ┆   ┆ ---       ┆           ┆ ---       ┆          │\n",
       "│           ┆ f64       ┆ f64       ┆ f64       ┆   ┆ f64       ┆           ┆ f64       ┆          │\n",
       "╞═══════════╪═══════════╪═══════════╪═══════════╪═══╪═══════════╪═══════════╪═══════════╪══════════╡\n",
       "│ 1.2.826.0 ┆ 0.404399  ┆ 0.542979  ┆ 0.802661  ┆ … ┆ 0.543882  ┆ 0.611672  ┆ 0.406926  ┆ 0.999632 │\n",
       "│ .1.368004 ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 3.8.498.1 ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 002…      ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 1.2.826.0 ┆ 0.73273   ┆ 0.652806  ┆ 0.856815  ┆ … ┆ 0.753165  ┆ 0.739615  ┆ 0.308672  ┆ 0.995623 │\n",
       "│ .1.368004 ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 3.8.498.1 ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 005…      ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 1.2.826.0 ┆ 0.0172    ┆ 0.043095  ┆ 0.023021  ┆ … ┆ 0.034771  ┆ 0.183065  ┆ 0.060077  ┆ 0.044316 │\n",
       "│ .1.368004 ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 3.8.498.1 ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 007…      ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "└───────────┴───────────┴───────────┴───────────┴───┴───────────┴───────────┴───────────┴──────────┘"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## For TPU environment (install missing packages / reinstall tensorflow to solve NaN topic during training / restart kernel)\n",
    "\n",
    "import IPython\n",
    "import tensorflow as tf\n",
    "\n",
    "if len(tf.config.experimental.list_logical_devices('TPU')) > 0:\n",
    "    # Kaggle TPU 環境向け（必要に応じて）\n",
    "    !pip install -q tensorflow-tpu -f https://storage.googleapis.com/libtpu-tf-releases/index.html --force-reinstall\n",
    "    !pip install -q pydot\n",
    "    !pip install -q -U keras-tuner\n",
    "    !pip install -q polars\n",
    "    !pip install -q pydicom\n",
    "    !pip install -q protobuf==5.29.5\n",
    "    IPython.Application.instance().kernel.do_shutdown(True)\n",
    "\n",
    "## Import packages\n",
    "\n",
    "# General purpose modules\n",
    "import os\n",
    "import shutil\n",
    "from collections import defaultdict\n",
    "import re\n",
    "import math\n",
    "from tqdm import tqdm\n",
    "import time\n",
    "\n",
    "# Data handling and visualization modules\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import polars as pl\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.pyplot import imshow\n",
    "from matplotlib.patches import Circle\n",
    "import pydicom\n",
    "\n",
    "# Skikit-learn preprocessing modules\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.model_selection import StratifiedGroupKFold\n",
    "\n",
    "# Tensorflow modules\n",
    "import tensorflow as tf\n",
    "import keras_tuner as kt\n",
    "\n",
    "# Custom specific evaluation module\n",
    "import kaggle_evaluation.rsna_inference_server\n",
    "\n",
    "## Detect hardware (CPU/GPU/TPU), setup environment and return appropriate distribution strategy\n",
    "\n",
    "try:\n",
    "    tpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect(tpu='local')\n",
    "    print('✅ Running on TPU ', tpu.master())\n",
    "except:\n",
    "    print('❌ Using CPU/GPU')\n",
    "    tpu = None\n",
    "\n",
    "if tpu:\n",
    "    strategy = tf.distribute.TPUStrategy(tpu)\n",
    "else:\n",
    "    strategy = tf.distribute.get_strategy()\n",
    "\n",
    "print(\"REPLICAS: \", strategy.num_replicas_in_sync)\n",
    "\n",
    "# =========================\n",
    "# 1) Configs\n",
    "# =========================\n",
    "# RGB 生成方法: 'copy'（従来のグレースケール→3ch複製） / 'e7'（WL/WW: Brain/Subdural/Bone）\n",
    "RGB_MODE = 'copy'  # ← 'e7' にすると E7 擬似RGB\n",
    "E7_WINDOWS = {\n",
    "    'brain':    (40, 80),    # (WL, WW)\n",
    "    'subdural': (80, 200),\n",
    "    'bone':     (600, 2800),\n",
    "}\n",
    "\n",
    "# 学習/提出フラグ\n",
    "TUNING = False\n",
    "TRAINING = True       # ← TrueのままでOK\n",
    "FINETUNING = False\n",
    "MAKE_SUBMISSION = True  # ← 新規: 学習の有無に関わらず提出を作る\n",
    "\n",
    "# =========================\n",
    "# 2) Load and split data\n",
    "# =========================\n",
    "path = '/kaggle/input/rsna-intracranial-aneurysm-detection/'\n",
    "trainval = pd.read_csv(path + \"train.csv\")\n",
    "trainval_localizers = pd.read_csv(path + \"train_localizers.csv\")\n",
    "trainval = trainval.merge(trainval_localizers, on='SeriesInstanceUID', how='outer')\n",
    "\n",
    "# StratifiedGroupKFold 用の多値ラベル列\n",
    "label_columns = trainval.columns[trainval.columns.str.contains('Artery|Tip|Other|Present', case=True)]\n",
    "label2class = {}\n",
    "trainval['class'] = 0\n",
    "for i, col in enumerate(label_columns[:]):\n",
    "    label2class[col] = i + 1\n",
    "    if i < 13:\n",
    "        trainval['class'] = trainval['class'] + trainval[col] * (i + 1)\n",
    "\n",
    "skf = StratifiedGroupKFold(n_splits=10, shuffle=True, random_state=33)\n",
    "for fold, (train_idx, val_idx) in enumerate(skf.split(trainval, y=trainval['class'], groups=trainval['SeriesInstanceUID'])):\n",
    "    train, val = trainval.iloc[train_idx], trainval.iloc[val_idx]\n",
    "    print(f\"✅ Fold {fold}: Train size = {len(train_idx)}, Val size = {len(val_idx)}\")\n",
    "    break\n",
    "\n",
    "# =========================\n",
    "# 3) Preprocessing helpers\n",
    "# =========================\n",
    "image_size = 300  # NN の入力解像度\n",
    "\n",
    "def _window_to_uint8(arr_hu: np.ndarray, wl: float, ww: float) -> np.ndarray:\n",
    "    \"\"\"HU配列に WL/WW を適用して [0,255] の uint8 にする\"\"\"\n",
    "    lo = wl - ww / 2.0\n",
    "    hi = wl + ww / 2.0\n",
    "    x = np.clip(arr_hu, lo, hi)\n",
    "    x = (x - lo) / max(hi - lo, 1e-6)\n",
    "    return (x * 255.0).astype(np.uint8)\n",
    "\n",
    "def make_rgb_3ch(image_2d: np.ndarray,\n",
    "                 mode: str = 'copy',\n",
    "                 dcm: pydicom.dataset.FileDataset | None = None,\n",
    "                 e7_windows: dict = E7_WINDOWS) -> np.ndarray:\n",
    "    \"\"\"\n",
    "    2Dグレースケールを3ch RGBに変換\n",
    "    \"\"\"\n",
    "    assert image_2d.ndim == 2, \"make_rgb_3ch expects 2D image\"\n",
    "\n",
    "    if mode == 'copy':\n",
    "        img = image_2d.astype(np.float32)\n",
    "        mn, mx = np.percentile(img, [0.5, 99.5]) if np.std(img) > 0 else (img.min(), img.max())\n",
    "        if mx > mn:\n",
    "            img = np.clip((img - mn) / (mx - mn), 0, 1.0)\n",
    "        else:\n",
    "            img = np.zeros_like(img, dtype=np.float32)\n",
    "        u8 = (img * 255.0).astype(np.uint8)\n",
    "        rgb = np.stack([u8, u8, u8], axis=-1)\n",
    "        return rgb\n",
    "\n",
    "    elif mode == 'e7':\n",
    "        slope = 1.0\n",
    "        intercept = 0.0\n",
    "        if dcm is not None:\n",
    "            try:\n",
    "                slope = float(getattr(dcm, 'RescaleSlope', 1.0))\n",
    "                intercept = float(getattr(dcm, 'RescaleIntercept', 0.0))\n",
    "            except:\n",
    "                slope, intercept = 1.0, 0.0\n",
    "\n",
    "        hu = image_2d.astype(np.float32) * slope + intercept\n",
    "        wl_b, ww_b = e7_windows['brain']\n",
    "        wl_s, ww_s = e7_windows['subdural']\n",
    "        wl_bo, ww_bo = e7_windows['bone']\n",
    "        ch_r = _window_to_uint8(hu, wl_b,  ww_b)\n",
    "        ch_g = _window_to_uint8(hu, wl_s,  ww_s)\n",
    "        ch_b = _window_to_uint8(hu, wl_bo, ww_bo)\n",
    "        rgb = np.stack([ch_r, ch_g, ch_b], axis=-1)\n",
    "        return rgb\n",
    "\n",
    "    else:\n",
    "        raise ValueError(f\"Unknown mode for make_rgb_3ch: {mode}\")\n",
    "\n",
    "def crop_image(image, x, y, tol=0.05, crop=True):\n",
    "    img0 = image[0, :, :, 0]\n",
    "    mask = img0 > tol\n",
    "    if crop and mask.sum() > 1000:\n",
    "        masked_idx = np.ix_(mask.any(1), mask.any(0))\n",
    "        image = image[:, masked_idx[0], :, :]\n",
    "        image = image[:, :, masked_idx[1], :]\n",
    "    if crop and x >= 0 and mask.sum() > 1000:\n",
    "        coor = np.zeros(img0.shape, dtype=float)\n",
    "        coor[round(y), round(x)] = 1\n",
    "        coor_masked = coor[masked_idx]\n",
    "        row, col = np.where(coor_masked == 1)\n",
    "        y, x = row[0], col[0]\n",
    "    return image, x, y\n",
    "\n",
    "def pad_and_resize(image, x, y):\n",
    "    _, H, W, _ = image.shape\n",
    "    pad = max(H, W)\n",
    "    image_padded = tf.image.resize_with_crop_or_pad(image, pad, pad)\n",
    "    image_resized = tf.image.resize(image_padded, [image_size, image_size], method=tf.image.ResizeMethod.BICUBIC)\n",
    "    if x >= 0:\n",
    "        coor = np.zeros(image.shape, dtype=float)\n",
    "        coor[:, round(y), round(x), :] = 1\n",
    "        coor_padded = tf.image.resize_with_crop_or_pad(coor, pad, pad)\n",
    "        coor_resized = tf.image.resize(coor_padded, [image_size, image_size], method=tf.image.ResizeMethod.AREA)\n",
    "        _, row, col, _ = np.where(coor_resized.numpy() == coor_resized.numpy().max())\n",
    "        y, x = row[0], col[0]\n",
    "    return image_resized, x, y\n",
    "\n",
    "def image_augmentation(image, x, y, augmentation=True):\n",
    "    if augmentation:\n",
    "        coor = np.zeros((image.shape), dtype=float)\n",
    "        zoom_fac = np.random.uniform(0.0, 0.0)\n",
    "        rot_fac = np.random.uniform(-0.1, 0.1)\n",
    "        trans_fac = np.random.uniform(-0.05, -0.05)\n",
    "        z = tf.keras.layers.RandomZoom(height_factor=(zoom_fac, zoom_fac), fill_mode='constant', name='auglay1')(image)\n",
    "        z = tf.keras.layers.RandomRotation(factor=(rot_fac, rot_fac), fill_mode='constant', name='auglay2')(z)\n",
    "        image = tf.keras.layers.RandomTranslation(height_factor=(trans_fac, trans_fac), width_factor=(trans_fac, trans_fac),\n",
    "                                                  interpolation='nearest', fill_mode='constant', name='auglay3')(z)\n",
    "        if x >= 0:\n",
    "            coor[:, round(y), round(x), :] = 1\n",
    "            coor = tf.convert_to_tensor(coor)\n",
    "            z = tf.keras.layers.RandomZoom(height_factor=(zoom_fac, zoom_fac), fill_mode='constant', name='auglay1')(coor)\n",
    "            z = tf.keras.layers.RandomRotation(factor=(rot_fac, rot_fac), fill_mode='constant', name='auglay2')(z)\n",
    "            coor = tf.keras.layers.RandomTranslation(height_factor=(trans_fac, trans_fac), width_factor=(trans_fac, trans_fac),\n",
    "                                                     interpolation='nearest', fill_mode='constant', name='auglay3')(z)\n",
    "            _, row, col, _ = np.where(coor.numpy() == coor.numpy().max())\n",
    "            y, x = row[0], col[0]\n",
    "    return image, x, y\n",
    "\n",
    "def preprocess_images(image_2d: np.ndarray,\n",
    "                      dcm: pydicom.dataset.FileDataset | None,\n",
    "                      x, y, crop, augmentation,\n",
    "                      rgb_mode: str = RGB_MODE) -> tuple[tf.Tensor, float, float]:\n",
    "    rgb = make_rgb_3ch(image_2d, mode=rgb_mode, dcm=dcm, e7_windows=E7_WINDOWS)  # [H,W,3] uint8\n",
    "    rgb01 = (rgb.astype(np.float32) / 255.0)[None, ...]  # [1,H,W,3]\n",
    "    try:\n",
    "        img_c, x_c, y_c = crop_image(rgb01, x, y, crop=crop)\n",
    "    except:\n",
    "        img_c, x_c, y_c = crop_image(rgb01, x, y, crop=False)\n",
    "    img_a, x_a, y_a = image_augmentation(img_c, x_c, y_c, augmentation=augmentation)\n",
    "    img_r, x_r, y_r = pad_and_resize(img_a, x_a, y_a)\n",
    "    img_u8 = tf.cast(img_r * 255.0, dtype=tf.uint8)\n",
    "    if x >= 0:\n",
    "        x_scaled, y_scaled = x_r / image_size, y_r / image_size\n",
    "    else:\n",
    "        x_scaled, y_scaled = -1, -1\n",
    "    return img_u8, x_scaled, y_scaled\n",
    "\n",
    "# =========================\n",
    "# 4) 可視化例（任意） — 必要なら有効化\n",
    "# =========================\n",
    "# ※ ここでは説明のため元の可視化は保持しますが学習/提出には不要です\n",
    "# modality = 'MRI T2'\n",
    "# aneurysm_present = train[train['Aneurysm Present'] == 1]\n",
    "# aneurysm_present_mod_fil = aneurysm_present[aneurysm_present['Modality'] == modality]\n",
    "# rows, columns = 2, 3\n",
    "# fig, ax = plt.subplots(rows, columns, figsize=(10, 8))\n",
    "# for i, index in enumerate(aneurysm_present_mod_fil.index[:rows*columns]):\n",
    "#     row = i // columns; col = i % columns\n",
    "#     data_slice = aneurysm_present_mod_fil.loc[index]\n",
    "#     SI_UID, SOPI_UID = data_slice['SeriesInstanceUID'], data_slice['SOPInstanceUID']\n",
    "#     sex, age = data_slice['PatientSex'], data_slice['PatientAge']\n",
    "#     x, y = eval(data_slice['coordinates'])['x'], eval(data_slice['coordinates'])['y']\n",
    "#     image_path = os.path.join(path, 'series', SI_UID, f\"{SOPI_UID}.dcm\")\n",
    "#     dcm = pydicom.dcmread(image_path)\n",
    "#     image = dcm.pixel_array\n",
    "#     if image.ndim == 3: image = image[0, :, :]\n",
    "#     image_resized, x_resized, y_resized = preprocess_images(image, dcm, x, y, crop=False, augmentation=False, rgb_mode=RGB_MODE)\n",
    "#     ax[row, col].imshow(image_resized[0])\n",
    "#     ax[row, col].set_title(f\"{sex} {age}\")\n",
    "#     ax[row, col].add_patch(Circle((x_resized*image_size, y_resized*image_size), 20, fill=False, ec='cyan'))\n",
    "# plt.tight_layout(); plt.show()\n",
    "\n",
    "# =========================\n",
    "# 5) Build datasets\n",
    "# =========================\n",
    "SUBMISSIONING = False\n",
    "iteration_nr = 4\n",
    "root_path = os.path.join(path, 'series')\n",
    "encoder_mod = OneHotEncoder(handle_unknown='ignore', sparse_output=False).fit([['MR'], ['CT']])\n",
    "\n",
    "def preprocess_step(data, iter_nr):\n",
    "    image_list, modality_list, label_list, coordinates_list = [], [], [], []\n",
    "    for i, index in enumerate(tqdm(data.index)):\n",
    "        data_slice = data.loc[index]\n",
    "        subfolder = data_slice['SeriesInstanceUID']\n",
    "        subfolder_path = os.path.join(root_path, subfolder)\n",
    "        if len(os.listdir(subfolder_path)) > iter_nr:\n",
    "            file_name = os.listdir(subfolder_path)[iter_nr]\n",
    "        else:\n",
    "            file_name = os.listdir(subfolder_path)[-1]\n",
    "\n",
    "        if not data_slice[['SOPInstanceUID']].isna().values[0]:\n",
    "            file_name = data_slice['SOPInstanceUID'] + '.dcm'\n",
    "\n",
    "        aneurysm_present = (data_slice['Aneurysm Present'] == 1)\n",
    "        augmentation = (iter_nr > 0) and aneurysm_present\n",
    "        dcm = pydicom.dcmread(os.path.join(subfolder_path, file_name))\n",
    "        try:\n",
    "            nr_frames = int(dcm.NumberOfFrames)\n",
    "            if aneurysm_present:\n",
    "                frame_nr = int(eval(data_slice['coordinates'])['f'])\n",
    "            else:\n",
    "                frame_nr = min(iter_nr, nr_frames - 1)\n",
    "        except:\n",
    "            frame_nr = 0\n",
    "\n",
    "        # 2D 画像を取り出し\n",
    "        try:\n",
    "            image = pydicom.pixels.pixel_array(dcm, index=frame_nr)\n",
    "        except:\n",
    "            image = dcm.pixel_array\n",
    "            if image.ndim == 3:\n",
    "                image = image[min(frame_nr, image.shape[0]-1), :, :]\n",
    "\n",
    "        mod = encoder_mod.transform([[dcm.Modality]])\n",
    "        if data_slice[['coordinates']].isna().values[0]:\n",
    "            x, y = -1, -1\n",
    "        else:\n",
    "            xy = eval(data_slice['coordinates'])\n",
    "            x, y = xy.get('x', -1), xy.get('y', -1)\n",
    "\n",
    "        image_resized, x_resized, y_resized = preprocess_images(\n",
    "            image, dcm, x, y, crop=False, augmentation=augmentation, rgb_mode=RGB_MODE\n",
    "        )\n",
    "\n",
    "        coordinates_tensor = tf.expand_dims(tf.convert_to_tensor([x_resized, y_resized], dtype=np.float32), 0)\n",
    "        image_list.append(image_resized)\n",
    "        modality_list.append(mod)\n",
    "        coordinates_list.append(coordinates_tensor)\n",
    "\n",
    "        # ラベルは明示的に数値化 → NaN を 0\n",
    "        labels_series = pd.to_numeric(data_slice[label_columns], errors='coerce').fillna(0)\n",
    "        label_tensor = tf.expand_dims(\n",
    "            tf.convert_to_tensor(labels_series.to_numpy(dtype=np.float32), dtype=np.float32),\n",
    "            0\n",
    "        )\n",
    "        label_list.append(label_tensor)\n",
    "\n",
    "    images = tf.concat(image_list, axis=0)          # [N,S,S,3] uint8\n",
    "    modalities = tf.concat(modality_list, axis=0)   # [N,2]\n",
    "    labels = tf.concat(label_list, axis=0)          # [N,14]\n",
    "    coordinates = tf.concat(coordinates_list, axis=0)  # [N,2]\n",
    "    return images, labels, coordinates, modalities\n",
    "\n",
    "def preprocess_loop(data, iteration_nr):\n",
    "    data_images_list, data_modalities_list, data_labels_list, data_coordinates_list = [], [], [], []\n",
    "    for i in range(iteration_nr):\n",
    "        di, dl, dc, dm = preprocess_step(data, i)\n",
    "        data_images_list.append(di)\n",
    "        data_modalities_list.append(dm)\n",
    "        data_labels_list.append(dl)\n",
    "        data_coordinates_list.append(dc)\n",
    "    data_images = tf.concat(data_images_list, axis=0)\n",
    "    data_modalities = tf.concat(data_modalities_list, axis=0)\n",
    "    data_labels = tf.concat(data_labels_list, axis=0)\n",
    "    data_coordinates = tf.concat(data_coordinates_list, axis=0)\n",
    "    return data_images, data_labels, data_coordinates, data_modalities\n",
    "\n",
    "if not SUBMISSIONING:\n",
    "    train_images, train_labels, train_coordinates, train_modalities = preprocess_loop(train[:], iteration_nr)\n",
    "    val_images, val_labels, val_coordinates, val_modalities = preprocess_loop(val[:], iteration_nr)\n",
    "else:\n",
    "    train_images, train_labels, train_coordinates, train_modalities = preprocess_loop(train[:64], iteration_nr)\n",
    "    val_images, val_labels, val_coordinates, val_modalities = preprocess_loop(val[:64], iteration_nr)\n",
    "\n",
    "# Memory check\n",
    "num_elements = tf.size(train_images).numpy()\n",
    "element_size = train_images.dtype.size\n",
    "total_memory = num_elements * element_size\n",
    "print(f\"Number of elements in train images: {num_elements}\")\n",
    "print(f\"Size of each element in train images: {element_size} bytes\")\n",
    "print(f\"Total memory size of train images: {total_memory/1024**3:.2f} GB\")\n",
    "\n",
    "# Datasets\n",
    "SEED=42\n",
    "batch_size=32\n",
    "batch_size_val=32\n",
    "\n",
    "train_ds = tf.data.Dataset.from_tensor_slices(({\"input_img\": train_images, \"input_mod\": train_modalities},\n",
    "                                               {\"class\": train_labels, \"reg\": train_coordinates}))\n",
    "train_ds = train_ds.shuffle(min(len(train_labels), 2048), seed=SEED).repeat().batch(batch_size, drop_remainder=True).prefetch(tf.data.AUTOTUNE)\n",
    "val_ds = tf.data.Dataset.from_tensor_slices(({\"input_img\": val_images, \"input_mod\": val_modalities},\n",
    "                                             {\"class\": val_labels, \"reg\": val_coordinates}))\n",
    "val_ds = val_ds.batch(batch_size_val, drop_remainder=True).prefetch(tf.data.AUTOTUNE)\n",
    "\n",
    "for X, y in val_ds.take(1):\n",
    "    print(X['input_img'].shape, X['input_img'].dtype)\n",
    "    print(X['input_mod'].shape)\n",
    "    print(y['class'].shape)\n",
    "    print(y['reg'].shape)\n",
    "\n",
    "# =========================\n",
    "# 6) Model\n",
    "# =========================\n",
    "label_weights = tf.constant([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13], dtype=tf.float32)/26\n",
    "\n",
    "@tf.keras.utils.register_keras_serializable()\n",
    "class WeightedBinaryCrossentropy(tf.keras.losses.Loss):\n",
    "    def __init__(self, name=\"weighted_bce_loss\", reduction='sum_over_batch_size'):\n",
    "        super().__init__(name=name, reduction=reduction)\n",
    "        self.weight_positive = 1 - tf.reduce_sum(train_labels, axis=0)/len(train_labels)\n",
    "        self.weight_negative = tf.reduce_sum(train_labels, axis=0)/len(train_labels)\n",
    "        self.label_weights = label_weights\n",
    "    def call(self, y_true, y_pred):\n",
    "        y_pred = tf.clip_by_value(y_pred, 1e-7, 1 - 1e-7)\n",
    "        bce = -(self.weight_positive * y_true * tf.math.log(y_pred) +\n",
    "                self.weight_negative * (1 - y_true) * tf.math.log(1 - y_pred))\n",
    "        bce = bce * self.label_weights\n",
    "        return tf.reduce_mean(bce)\n",
    "\n",
    "@tf.keras.utils.register_keras_serializable()\n",
    "class Rescale(tf.keras.layers.Layer):\n",
    "    def call(self, inputs):\n",
    "        x = tf.cast(inputs, tf.float32) / 255.0\n",
    "        return x\n",
    "\n",
    "@tf.keras.utils.register_keras_serializable()\n",
    "class PreProcess(tf.keras.layers.Layer):\n",
    "    def __init__(self, base_network_type, **kwargs):\n",
    "        super().__init__(**kwargs)\n",
    "        if base_network_type < 9:\n",
    "            self.preprocess_input = tf.keras.applications.efficientnet.preprocess_input\n",
    "        else:\n",
    "            self.preprocess_input = tf.keras.applications.efficientnet_v2.preprocess_input\n",
    "    def call(self, inputs):\n",
    "        return self.preprocess_input(inputs*255.0)\n",
    "\n",
    "def build_network(hp):\n",
    "    base_network_type = 9\n",
    "    if base_network_type == 4: base_model = tf.keras.applications.EfficientNetB0(include_top=False, input_shape=[image_size, image_size, 3], weights='imagenet')\n",
    "    elif base_network_type == 5: base_model = tf.keras.applications.EfficientNetB1(include_top=False, input_shape=[image_size, image_size, 3], weights='imagenet')\n",
    "    elif base_network_type == 6: base_model = tf.keras.applications.EfficientNetB2(include_top=False, input_shape=[image_size, image_size, 3], weights='imagenet')\n",
    "    elif base_network_type == 7: base_model = tf.keras.applications.EfficientNetB3(include_top=False, input_shape=[image_size, image_size, 3], weights='imagenet')\n",
    "    elif base_network_type == 8: base_model = tf.keras.applications.EfficientNetB4(include_top=False, input_shape=[image_size, image_size, 3], weights='imagenet')\n",
    "    elif base_network_type == 9: base_model = tf.keras.applications.EfficientNetV2B0(include_top=False, input_shape=[image_size, image_size, 3], weights='imagenet')\n",
    "    elif base_network_type == 10: base_model = tf.keras.applications.EfficientNetV2B1(include_top=False, input_shape=[image_size, image_size, 3], weights='imagenet')\n",
    "    elif base_network_type == 11: base_model = tf.keras.applications.EfficientNetV2B2(include_top=False, input_shape=[image_size, image_size, 3], weights='imagenet')\n",
    "    elif base_network_type == 12: base_model = tf.keras.applications.EfficientNetV2B3(include_top=False, input_shape=[image_size, image_size, 3], weights='imagenet')\n",
    "    elif base_network_type == 13: base_model = tf.keras.applications.EfficientNetV2S(include_top=False, input_shape=[image_size, image_size, 3], weights='imagenet')\n",
    "    else: raise ValueError('Wrong base network number!')\n",
    "\n",
    "    prep = PreProcess(base_network_type=base_network_type, name='preprocessing')\n",
    "\n",
    "    base_model.trainable = False\n",
    "    layer_id = len(base_model.layers)\n",
    "    print('Unfreeze base model layers from layer ' + str(base_model.layers[-layer_id]))\n",
    "    for layer in base_model.layers[-layer_id:]:\n",
    "        layer.trainable = True\n",
    "\n",
    "    input_img = tf.keras.Input(shape=(image_size, image_size, 3), name='input_img')\n",
    "    input_mod = tf.keras.Input(shape=(2,), name='input_mod')\n",
    "\n",
    "    x = Rescale(name='rescaling')(input_img)\n",
    "    gap_do = hp.Float(name='do_dnn', min_value=0, max_value=0.4, step=0.05, default=0.1)\n",
    "    x = prep(x)\n",
    "    x = base_model(x)\n",
    "    x = tf.keras.layers.GlobalAveragePooling2D(name='gap2d')(x)\n",
    "    x = tf.keras.layers.BatchNormalization(name='gap2d_bn')(x)\n",
    "    x = tf.keras.layers.Dropout(gap_do, name='gap2d_do')(x)\n",
    "\n",
    "    x = tf.keras.layers.Concatenate(name='concat_gap')([x, input_mod])\n",
    "\n",
    "    y = x\n",
    "    reg_dnn = None\n",
    "    ki_dnn = 'he_uniform'\n",
    "    do_dnn = gap_do\n",
    "    layers_final = 1\n",
    "    units_final = 512\n",
    "    for i in range(layers_final):\n",
    "        y = tf.keras.layers.Dense(units_final, activation=\"relu\", kernel_regularizer=reg_dnn,\n",
    "                                  kernel_initializer=ki_dnn, name=f'final_fc{i+1}')(y)\n",
    "        y = tf.keras.layers.BatchNormalization(name=f'final_bn{i+1}')(y)\n",
    "        y = tf.keras.layers.Dropout(do_dnn, name=f'final_do{i+1}')(y)\n",
    "    output_lab = tf.keras.layers.Dense(len(label2class.keys()), activation=\"sigmoid\", kernel_regularizer=reg_dnn, name='class')(y)\n",
    "\n",
    "    z = x\n",
    "    reg_dnn_reg = None\n",
    "    ki_dnn_reg = 'he_uniform'\n",
    "    do_dnn_reg = gap_do\n",
    "    layers_final_reg = 1\n",
    "    units_final_reg = 256\n",
    "    for i in range(layers_final_reg):\n",
    "        z = tf.keras.layers.Dense(units_final_reg, activation=\"relu\", kernel_regularizer=reg_dnn_reg,\n",
    "                                  kernel_initializer=ki_dnn_reg, name=f'final_fc_reg{i+1}')(z)\n",
    "        z = tf.keras.layers.Dropout(do_dnn_reg, name=f'final_do_reg{i+1}')(z)\n",
    "    output_coord = tf.keras.layers.Dense(2, activation=\"linear\", kernel_regularizer=reg_dnn_reg, name='reg')(z)\n",
    "\n",
    "    model = tf.keras.Model(inputs=[input_img, input_mod], outputs=[output_lab, output_coord], name='RSNA_Class')\n",
    "\n",
    "    lr_tune = 1e-3\n",
    "    optimizer = tf.keras.optimizers.Adam(lr_tune)\n",
    "    loss_class = WeightedBinaryCrossentropy()\n",
    "    loss = {\"reg\": \"mean_squared_error\", \"class\": loss_class}\n",
    "    loss_weights = {\"reg\": 0.01, \"class\": 0.99}\n",
    "    auc = tf.keras.metrics.AUC(multi_label=True, label_weights=label_weights, name='auc')\n",
    "    metrics = {\"reg\": [\"mae\"], \"class\": [auc]}\n",
    "\n",
    "    model.compile(optimizer=optimizer, loss=loss, loss_weights=loss_weights, metrics=metrics, run_eagerly=False)\n",
    "    return model\n",
    "\n",
    "with strategy.scope():\n",
    "    model = build_network(kt.HyperParameters())\n",
    "\n",
    "model.summary(line_length=110)\n",
    "\n",
    "# =========================\n",
    "# 7) Training\n",
    "# =========================\n",
    "epochs = 50\n",
    "steps_per_epoch = len(train_labels)//batch_size\n",
    "if TRAINING or FINETUNING:\n",
    "    lr_scheduler = tf.keras.callbacks.ReduceLROnPlateau(factor=0.2, patience=5, verbose=1, monitor='val_class_auc', mode='max')\n",
    "    early_stopping_cb = tf.keras.callbacks.EarlyStopping(patience=10, verbose=1, monitor='val_class_auc', mode='max', restore_best_weights=True)\n",
    "    history = model.fit(\n",
    "        train_ds,\n",
    "        validation_data=val_ds,\n",
    "        epochs=epochs,\n",
    "        steps_per_epoch=steps_per_epoch,\n",
    "        callbacks=[lr_scheduler, early_stopping_cb]\n",
    "    )\n",
    "\n",
    "# =========================\n",
    "# 8) Evaluation / Visualization\n",
    "# =========================\n",
    "if TRAINING or FINETUNING:\n",
    "    history_fil = {k: history.history[k] for k in ['class_auc', 'val_class_auc'] if k in history.history}\n",
    "    history_fil2 = {k: history.history[k] for k in ['class_loss', 'val_class_loss'] if k in history.history}\n",
    "    if history_fil:\n",
    "        pd.DataFrame(history_fil).plot(); plt.ylabel(\"AUC\"); plt.xlabel(\"epochs\"); plt.show()\n",
    "    if history_fil2:\n",
    "        pd.DataFrame(history_fil2).plot(); plt.ylabel(\"Loss\"); plt.xlabel(\"epochs\"); plt.show()\n",
    "\n",
    "# =========================\n",
    "# 9) Inference / Submission\n",
    "# =========================\n",
    "ID_COL = 'SeriesInstanceUID'\n",
    "LABEL_COLS = ['Left Infraclinoid Internal Carotid Artery', 'Right Infraclinoid Internal Carotid Artery',\n",
    "              'Left Supraclinoid Internal Carotid Artery', 'Right Supraclinoid Internal Carotid Artery',\n",
    "              'Left Middle Cerebral Artery', 'Right Middle Cerebral Artery', 'Anterior Communicating Artery',\n",
    "              'Left Anterior Cerebral Artery', 'Right Anterior Cerebral Artery', 'Left Posterior Communicating Artery',\n",
    "              'Right Posterior Communicating Artery', 'Basilar Tip', 'Other Posterior Circulation', 'Aneurysm Present']\n",
    "\n",
    "def predict(series_path: str) -> pl.DataFrame | pd.DataFrame:\n",
    "    series_id = os.path.basename(series_path)\n",
    "    all_filepaths = []\n",
    "    for root, _, files in os.walk(series_path):\n",
    "        for file in files:\n",
    "            if file.endswith('.dcm'):\n",
    "                all_filepaths.append(os.path.join(root, file))\n",
    "    all_filepaths.sort()\n",
    "\n",
    "    image_list, mod_list = [], []\n",
    "    for image_path in all_filepaths:\n",
    "        dcm = pydicom.dcmread(image_path)\n",
    "        arr = dcm.pixel_array\n",
    "        if arr.ndim == 3:\n",
    "            for frame in arr:\n",
    "                img_resized, _, _ = preprocess_images(frame, dcm, -1, -1, crop=False, augmentation=False, rgb_mode=RGB_MODE)\n",
    "                image_list.append(tf.cast(img_resized, tf.float32))\n",
    "                mod_list.append(tf.cast(encoder_mod.transform([[dcm.Modality]]), tf.float32))\n",
    "        else:\n",
    "            img_resized, _, _ = preprocess_images(arr, dcm, -1, -1, crop=False, augmentation=False, rgb_mode=RGB_MODE)\n",
    "            image_list.append(tf.cast(img_resized, tf.float32))\n",
    "            mod_list.append(tf.cast(encoder_mod.transform([[dcm.Modality]]), tf.float32))\n",
    "\n",
    "    test_images = tf.concat(image_list, axis=0)\n",
    "    test_mods = tf.concat(mod_list, axis=0)\n",
    "\n",
    "    lab, coor = model.predict((test_images, test_mods), verbose=0)\n",
    "    prob_lab = np.max(lab, axis=0)\n",
    "    predictions_list = prob_lab.astype('float').tolist()\n",
    "\n",
    "    # ★ ID付きで返す\n",
    "    predictions = pl.DataFrame(data=[[series_id] + predictions_list],\n",
    "                               schema=[ID_COL, *LABEL_COLS], orient='row')\n",
    "    return predictions\n",
    "\n",
    "def _run_submission_generation():\n",
    "    \"\"\" 学習フラグに依存せず submission.parquet を生成 \"\"\"\n",
    "    print(\"▶️ Running inference gateway to generate submission.parquet ...\")\n",
    "    inference_server = kaggle_evaluation.rsna_inference_server.RSNAInferenceServer(predict)\n",
    "    if os.getenv('KAGGLE_IS_COMPETITION_RERUN'):\n",
    "        inference_server.serve()\n",
    "    else:\n",
    "        inference_server.run_local_gateway()\n",
    "\n",
    "    sub_path = '/kaggle/working/submission.parquet'\n",
    "    if os.path.exists(sub_path):\n",
    "        print(\"✅ submission.parquet generated:\", sub_path)\n",
    "        try:\n",
    "            display(pl.read_parquet(sub_path))\n",
    "        except Exception as e:\n",
    "            print(\"display failed:\", e)\n",
    "    else:\n",
    "        print(\"❌ submission.parquet not found. Check predict() and server logs.\")\n",
    "\n",
    "# 旧来の条件も残す（後方互換）\n",
    "if not TRAINING and not TUNING and not FINETUNING:\n",
    "    _run_submission_generation()\n",
    "\n",
    "# ★ 新規：学習していても提出を作る\n",
    "if MAKE_SUBMISSION:\n",
    "    _run_submission_generation()\n",
    "\n",
    "# 後片付け（任意）\n",
    "shutil.rmtree('/kaggle/shared', ignore_errors=True)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 13851420,
     "sourceId": 99552,
     "sourceType": "competition"
    }
   ],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5271.266602,
   "end_time": "2025-10-15T00:37:03.119821",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-14T23:09:11.853219",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
