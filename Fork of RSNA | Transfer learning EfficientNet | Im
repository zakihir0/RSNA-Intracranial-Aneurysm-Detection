{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "68db69aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-10T02:49:29.117390Z",
     "iopub.status.busy": "2025-10-10T02:49:29.117163Z",
     "iopub.status.idle": "2025-10-10T02:51:25.311152Z",
     "shell.execute_reply": "2025-10-10T02:51:25.310296Z"
    },
    "papermill": {
     "duration": 116.209422,
     "end_time": "2025-10-10T02:51:25.322557",
     "exception": false,
     "start_time": "2025-10-10T02:49:29.113135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-10-10 02:49:33.864373: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1760064574.066872      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1760064574.121025      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "I0000 00:00:1760064586.607289      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_split.py:909: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=10.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "❌ Using CPU/GPU\n",
      "REPLICAS:  1\n",
      "✅ Fold 0: Train size = 4264, Val size = 475\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 64/64 [00:05<00:00, 10.92it/s]\n",
      "100%|██████████| 64/64 [00:05<00:00, 12.15it/s]\n",
      "100%|██████████| 64/64 [00:04<00:00, 15.23it/s]\n",
      "100%|██████████| 64/64 [00:04<00:00, 15.52it/s]\n",
      "100%|██████████| 64/64 [00:04<00:00, 13.65it/s]\n",
      "100%|██████████| 64/64 [00:03<00:00, 16.12it/s]\n",
      "100%|██████████| 64/64 [00:04<00:00, 15.70it/s]\n",
      "100%|██████████| 64/64 [00:04<00:00, 15.84it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[WARN] Failed to load INPUT model: Unknown layer: 'Cast'. Please ensure you are using a `keras.utils.custom_object_scope` and that this object is included in the scope. See https://www.tensorflow.org/guide/keras/save_and_serialize#registering_the_custom_object for details.\n",
      "No saved model found. Building a fresh model.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1760064650.624309      58 service.cc:148] XLA service 0x3d478730 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1760064650.625052      58 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1760064651.467101      58 cuda_dnn.cc:529] Loaded cuDNN version 90300\n",
      "I0000 00:00:1760064658.252596      58 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (3, 15)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>SeriesInstanceUID</th><th>Left Infraclinoid Internal Carotid Artery</th><th>Right Infraclinoid Internal Carotid Artery</th><th>Left Supraclinoid Internal Carotid Artery</th><th>Right Supraclinoid Internal Carotid Artery</th><th>Left Middle Cerebral Artery</th><th>Right Middle Cerebral Artery</th><th>Anterior Communicating Artery</th><th>Left Anterior Cerebral Artery</th><th>Right Anterior Cerebral Artery</th><th>Left Posterior Communicating Artery</th><th>Right Posterior Communicating Artery</th><th>Basilar Tip</th><th>Other Posterior Circulation</th><th>Aneurysm Present</th></tr><tr><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;1.2.826.0.1.3680043.8.498.1005…</td><td>0.499238</td><td>0.492979</td><td>0.488386</td><td>0.507691</td><td>0.497801</td><td>0.504731</td><td>0.519369</td><td>0.506503</td><td>0.487242</td><td>0.500444</td><td>0.515143</td><td>0.504201</td><td>0.511312</td><td>0.516198</td></tr><tr><td>&quot;1.2.826.0.1.3680043.8.498.1007…</td><td>0.50969</td><td>0.496187</td><td>0.492079</td><td>0.511399</td><td>0.493534</td><td>0.501326</td><td>0.524734</td><td>0.511485</td><td>0.511805</td><td>0.508529</td><td>0.514247</td><td>0.501252</td><td>0.499536</td><td>0.526195</td></tr><tr><td>&quot;1.2.826.0.1.3680043.8.498.1002…</td><td>0.509539</td><td>0.495866</td><td>0.491974</td><td>0.5108</td><td>0.492879</td><td>0.500769</td><td>0.523611</td><td>0.511912</td><td>0.511698</td><td>0.508249</td><td>0.513612</td><td>0.501269</td><td>0.499334</td><td>0.526044</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (3, 15)\n",
       "┌───────────┬───────────┬───────────┬───────────┬───┬───────────┬───────────┬───────────┬──────────┐\n",
       "│ SeriesIns ┆ Left Infr ┆ Right Inf ┆ Left Supr ┆ … ┆ Right     ┆ Basilar   ┆ Other     ┆ Aneurysm │\n",
       "│ tanceUID  ┆ aclinoid  ┆ raclinoid ┆ aclinoid  ┆   ┆ Posterior ┆ Tip       ┆ Posterior ┆ Present  │\n",
       "│ ---       ┆ Internal  ┆ Internal  ┆ Internal  ┆   ┆ Communica ┆ ---       ┆ Circulati ┆ ---      │\n",
       "│ str       ┆ Car…      ┆ Ca…       ┆ Car…      ┆   ┆ ting …    ┆ f64       ┆ on        ┆ f64      │\n",
       "│           ┆ ---       ┆ ---       ┆ ---       ┆   ┆ ---       ┆           ┆ ---       ┆          │\n",
       "│           ┆ f64       ┆ f64       ┆ f64       ┆   ┆ f64       ┆           ┆ f64       ┆          │\n",
       "╞═══════════╪═══════════╪═══════════╪═══════════╪═══╪═══════════╪═══════════╪═══════════╪══════════╡\n",
       "│ 1.2.826.0 ┆ 0.499238  ┆ 0.492979  ┆ 0.488386  ┆ … ┆ 0.515143  ┆ 0.504201  ┆ 0.511312  ┆ 0.516198 │\n",
       "│ .1.368004 ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 3.8.498.1 ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 005…      ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 1.2.826.0 ┆ 0.50969   ┆ 0.496187  ┆ 0.492079  ┆ … ┆ 0.514247  ┆ 0.501252  ┆ 0.499536  ┆ 0.526195 │\n",
       "│ .1.368004 ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 3.8.498.1 ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 007…      ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 1.2.826.0 ┆ 0.509539  ┆ 0.495866  ┆ 0.491974  ┆ … ┆ 0.513612  ┆ 0.501269  ┆ 0.499334  ┆ 0.526044 │\n",
       "│ .1.368004 ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 3.8.498.1 ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ 002…      ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "└───────────┴───────────┴───────────┴───────────┴───┴───────────┴───────────┴───────────┴──────────┘"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# RSNA Intracranial Aneurysm - Single-Page Script (Complete, no custom_objects)\n",
    "# ---------------------------------------------------------------------------\n",
    "# 改善点:\n",
    "# 1) Cosine+Warmup LR (+EMA)\n",
    "# 2) 入力解像度384 + Mixed Precision (AMP) + LearnableRGB(Conv1x1)\n",
    "# 3) クラス別しきい値最適化（Youden J; 提出時は通常OFF）\n",
    "#\n",
    "# 保存/読込:\n",
    "# - 学習時(SUBMISSIONING=False)は /kaggle/working/rsna-2xx/rsna_2_10_0.h5 に保存\n",
    "# - 読込は /kaggle/working → /kaggle/input の順で探索（custom_objects不要）\n",
    "#\n",
    "# 依存:\n",
    "# - Kaggle 環境を想定\n",
    "# - EfficientNetV2 のweightsは既定でNone（=DLしない）。必要なら環境変数 USE_IMAGENET=1\n",
    "\n",
    "import os\n",
    "import math\n",
    "import shutil\n",
    "from tqdm import tqdm\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import polars as pl\n",
    "from sklearn.preprocessing import OneHotEncoder, MinMaxScaler\n",
    "from sklearn.model_selection import StratifiedGroupKFold\n",
    "import tensorflow as tf\n",
    "import keras_tuner as kt\n",
    "import pydicom\n",
    "import kaggle_evaluation.rsna_inference_server\n",
    "\n",
    "# ============================\n",
    "# 0) 環境/パス設定\n",
    "# ============================\n",
    "# 提出ゲートウェイ起動のみかどうか（True: 推論のみ / False: 学習～保存）\n",
    "SUBMISSIONING = True\n",
    "\n",
    "# モデル保存/読込パス\n",
    "MODEL_DIR_WORK = \"/kaggle/working/rsna-2xx\"\n",
    "MODEL_DIR_INPUT = \"/kaggle/input/rsna-transfer-learning-efficientnet-image-aug/rsna-2xx\"\n",
    "MODEL_NAME = \"rsna_2_10_0.h5\"\n",
    "MODEL_PATH_WORK = os.path.join(MODEL_DIR_WORK, MODEL_NAME)\n",
    "MODEL_PATH_INPUT = os.path.join(MODEL_DIR_INPUT, MODEL_NAME)\n",
    "os.makedirs(MODEL_DIR_WORK, exist_ok=True)\n",
    "\n",
    "# オフライン安全: ImageNet重みDLを避ける（必要なら環境変数で上書き）\n",
    "USE_IMAGENET = os.getenv(\"USE_IMAGENET\", \"0\") in (\"1\", \"true\", \"True\")\n",
    "LOCAL_WEIGHTS = os.getenv(\"LOCAL_WEIGHTS\", \"\")  # ベースCNNのローカル重みがある場合\n",
    "\n",
    "# Mixed Precision & Strategy\n",
    "try:\n",
    "    tpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect(tpu='local')\n",
    "    print('✅ Running on TPU ', tpu.master())\n",
    "except Exception:\n",
    "    print('❌ Using CPU/GPU')\n",
    "    tpu = None\n",
    "\n",
    "if tpu:\n",
    "    strategy = tf.distribute.TPUStrategy(tpu)\n",
    "    tf.keras.mixed_precision.set_global_policy('mixed_bfloat16')\n",
    "else:\n",
    "    strategy = tf.distribute.get_strategy()\n",
    "    try:\n",
    "        tf.keras.mixed_precision.set_global_policy('mixed_float16')\n",
    "    except Exception:\n",
    "        pass\n",
    "print(\"REPLICAS: \", strategy.num_replicas_in_sync)\n",
    "\n",
    "# ============================\n",
    "# 1) データ読み込みと分割\n",
    "# ============================\n",
    "path = '/kaggle/input/rsna-intracranial-aneurysm-detection/'\n",
    "trainval = pd.read_csv(os.path.join(path, \"train.csv\"))\n",
    "trainval_localizers = pd.read_csv(os.path.join(path, \"train_localizers.csv\"))\n",
    "trainval = trainval.merge(trainval_localizers, on='SeriesInstanceUID', how='outer')\n",
    "\n",
    "# StratifiedGroupKFold 用クラス作成（多ラベル→多クラス）\n",
    "label_columns = trainval.columns[trainval.columns.str.contains('Artery|Tip|Other|Present', case=True)]\n",
    "label2class = {}\n",
    "trainval['class'] = 0\n",
    "for i, col in enumerate(label_columns[:]):\n",
    "    label2class[col] = i + 1\n",
    "    if i < 13:\n",
    "        trainval['class'] = trainval['class'] + trainval[col] * (i + 1)\n",
    "\n",
    "skf = StratifiedGroupKFold(n_splits=10, shuffle=True, random_state=33)\n",
    "for fold, (train_idx, val_idx) in enumerate(\n",
    "    skf.split(trainval, y=trainval['class'], groups=trainval['SeriesInstanceUID'])\n",
    "):\n",
    "    train = trainval.iloc[train_idx].reset_index(drop=True)\n",
    "    val   = trainval.iloc[val_idx].reset_index(drop=True)\n",
    "    print(f\"✅ Fold {fold}: Train size = {len(train_idx)}, Val size = {len(val_idx)}\")\n",
    "    break\n",
    "\n",
    "# ============================\n",
    "# 2) 画像前処理\n",
    "# ============================\n",
    "image_size = 384  # 改善点(2): 解像度UP\n",
    "\n",
    "def crop_image(image, x, y, tol=0.05, crop=True):\n",
    "    img = image[0, :, :, 0]\n",
    "    mask = img > tol\n",
    "    if crop and mask.sum() > 1000:\n",
    "        masked_idx = np.ix_(mask.any(1), mask.any(0))\n",
    "        image = img[masked_idx]\n",
    "        image = image.reshape(1, image.shape[0], image.shape[1], 1)\n",
    "    if crop and x >= 0 and mask.sum() > 1000:\n",
    "        coor = np.zeros((img.shape), dtype=float)\n",
    "        coor[round(y), round(x)] = 1\n",
    "        coor_masked = coor[masked_idx]\n",
    "        row, col = np.where(coor_masked == 1)\n",
    "        y, x = row[0], col[0]\n",
    "    return image, x, y\n",
    "\n",
    "def pad_and_resize(image, x, y):\n",
    "    _, h, w, _ = image.shape\n",
    "    pad_size = max(h, w)\n",
    "    image_padded = tf.image.resize_with_crop_or_pad(image, pad_size, pad_size)\n",
    "    image_resized = tf.image.resize(image_padded, [image_size, image_size], method=tf.image.ResizeMethod.BICUBIC)\n",
    "    if x >= 0:\n",
    "        coor = np.zeros((image.shape), dtype=float)\n",
    "        coor[:, round(y), round(x), :] = 1\n",
    "        coor_padded = tf.image.resize_with_crop_or_pad(coor, pad_size, pad_size)\n",
    "        coor_resized = tf.image.resize(coor_padded, [image_size, image_size], method=tf.image.ResizeMethod.AREA)\n",
    "        _, row, col, _ = np.where(coor_resized.numpy() == coor_resized.numpy().max())\n",
    "        y, x = row[0], col[0]\n",
    "    return image_resized, x, y\n",
    "\n",
    "def image_augmentation(image, x, y, augmentation=True):\n",
    "    if augmentation:\n",
    "        coor = np.zeros((image.shape), dtype=float)\n",
    "        zoom_fac = np.random.uniform(0.0, 0.0)\n",
    "        rot_fac = np.random.uniform(-0.1, 0.1)\n",
    "        trans_fac = np.random.uniform(-0.05, 0.05)\n",
    "        z = tf.keras.layers.RandomZoom(height_factor=(zoom_fac, zoom_fac), fill_mode='constant', name='auglay1')(image)\n",
    "        z = tf.keras.layers.RandomRotation(factor=(rot_fac, rot_fac), fill_mode='constant', name='auglay2')(z)\n",
    "        image = tf.keras.layers.RandomTranslation(\n",
    "            height_factor=(trans_fac, trans_fac), width_factor=(trans_fac, trans_fac),\n",
    "            interpolation='nearest', fill_mode='constant', name='auglay3'\n",
    "        )(z)\n",
    "        if x >= 0:\n",
    "            coor[:, round(y), round(x), :] = 1\n",
    "            coor = tf.convert_to_tensor(coor)\n",
    "            z = tf.keras.layers.RandomZoom(height_factor=(zoom_fac, zoom_fac), fill_mode='constant', name='auglay1')(coor)\n",
    "            z = tf.keras.layers.RandomRotation(factor=(rot_fac, rot_fac), fill_mode='constant', name='auglay2')(z)\n",
    "            coor = tf.keras.layers.RandomTranslation(\n",
    "                height_factor=(trans_fac, trans_fac), width_factor=(trans_fac, trans_fac),\n",
    "                interpolation='nearest', fill_mode='constant', name='auglay3'\n",
    "            )(z)\n",
    "            _, row, col, _ = np.where(coor.numpy() == coor.numpy().max())\n",
    "            y, x = row[0], col[0]\n",
    "    return image, x, y\n",
    "\n",
    "def preprocess_images(image, x, y, crop, augmentation):\n",
    "    image_scaled = (MinMaxScaler().fit_transform(image.reshape(-1, 1))).reshape(1, image.shape[0], image.shape[1], 1).astype(np.float32)\n",
    "    try:\n",
    "        image_c, x_c, y_c = crop_image(image_scaled, x, y, crop=crop)\n",
    "    except Exception:\n",
    "        image_c, x_c, y_c = crop_image(image_scaled, x, y, crop=False)\n",
    "    image_aug, x_a, y_a = image_augmentation(image_c, x_c, y_c, augmentation=augmentation)\n",
    "    image_resized, x_r, y_r = pad_and_resize(image_aug, x_a, y_a)\n",
    "    image_resized = tf.cast(image_resized*255, dtype=tf.uint8)  # メモリ節約\n",
    "    if x >= 0:\n",
    "        x_rs, y_rs = x_r/image_size, y_r/image_size\n",
    "    else:\n",
    "        x_rs, y_rs = -1, -1\n",
    "    return image_resized, x_rs, y_rs\n",
    "\n",
    "# ============================\n",
    "# 3) データセット作成\n",
    "# ============================\n",
    "iteration_nr = 4\n",
    "root_path = os.path.join(path, 'series')\n",
    "encoder_mod = OneHotEncoder(handle_unknown='ignore', sparse_output=False).fit([['MR'], ['CT']])\n",
    "\n",
    "def preprocess_step(data, iter_nr):\n",
    "    image_list, modality_list, label_list, coordinates_list = [], [], [], []\n",
    "    for i, idx in enumerate(tqdm(data.index)):\n",
    "        data_slice = data.loc[idx]\n",
    "        subfolder = data_slice['SeriesInstanceUID']\n",
    "        subfolder_path = os.path.join(root_path, subfolder)\n",
    "\n",
    "        files_in = os.listdir(subfolder_path); files_in.sort()\n",
    "        file_name = files_in[iter_nr] if len(files_in) > iter_nr else files_in[-1]\n",
    "        if not pd.isna(data_slice.get('SOPInstanceUID')):\n",
    "            file_name = f\"{data_slice['SOPInstanceUID']}.dcm\"\n",
    "\n",
    "        dcm = pydicom.dcmread(os.path.join(subfolder_path, file_name))\n",
    "        try:\n",
    "            nr_frames = int(dcm.NumberOfFrames)\n",
    "            if data_slice['Aneurysm Present'] == 1:\n",
    "                frame_nr = int(eval(data_slice['coordinates'])['f'])\n",
    "            else:\n",
    "                frame_nr = min(iter_nr, nr_frames-1)\n",
    "        except Exception:\n",
    "            frame_nr = 0\n",
    "\n",
    "        # フレーム取得\n",
    "        img = getattr(pydicom, 'pixels', None)\n",
    "        if img and hasattr(pydicom, 'pixels'):\n",
    "            image = pydicom.pixels.pixel_array(dcm, index=frame_nr)\n",
    "        else:\n",
    "            image = dcm.pixel_array\n",
    "\n",
    "        mod = encoder_mod.transform([[dcm.Modality]])\n",
    "        if pd.isna(data_slice.get('coordinates')):\n",
    "            x, y = -1, -1\n",
    "        else:\n",
    "            xy = eval(data_slice['coordinates']); x, y = xy['x'], xy['y']\n",
    "\n",
    "        image_resized, x_rs, y_rs = preprocess_images(\n",
    "            image, x, y, crop=False, augmentation=(iter_nr > 0 and data_slice['Aneurysm Present'] == 1)\n",
    "        )\n",
    "        coordinates_tensor = tf.expand_dims(tf.convert_to_tensor([x_rs, y_rs], dtype=np.float32), 0)\n",
    "        image_list.append(image_resized)\n",
    "        modality_list.append(mod)\n",
    "        coordinates_list.append(coordinates_tensor)\n",
    "\n",
    "        labels = data_slice[label_columns]\n",
    "        label_tensor = tf.expand_dims(tf.convert_to_tensor(labels, dtype=np.float32), 0)\n",
    "        label_list.append(label_tensor)\n",
    "\n",
    "    images = tf.concat(image_list, axis=0)\n",
    "    modalities = tf.concat(modality_list, axis=0)\n",
    "    labels = tf.concat(label_list, axis=0)\n",
    "    coordinates = tf.concat(coordinates_list, axis=0)\n",
    "    return images, labels, coordinates, modalities\n",
    "\n",
    "def preprocess_loop(data, iteration_nr):\n",
    "    data_images_list, data_modalities_list, data_labels_list, data_coordinates_list = [], [], [], []\n",
    "    for i in range(iteration_nr):\n",
    "        di, dl, dc, dm = preprocess_step(data, i)\n",
    "        data_images_list.append(di)\n",
    "        data_modalities_list.append(dm)\n",
    "        data_labels_list.append(dl)\n",
    "        data_coordinates_list.append(dc)\n",
    "    data_images = tf.concat(data_images_list, axis=0)\n",
    "    data_modalities = tf.concat(data_modalities_list, axis=0)\n",
    "    data_labels = tf.concat(data_labels_list, axis=0)\n",
    "    data_coordinates = tf.concat(data_coordinates_list, axis=0)\n",
    "    return data_images, data_labels, data_coordinates, data_modalities\n",
    "\n",
    "if not SUBMISSIONING:\n",
    "    train_images, train_labels, train_coordinates, train_modalities = preprocess_loop(train[:], iteration_nr)\n",
    "    val_images,   val_labels,   val_coordinates,   val_modalities   = preprocess_loop(val[:], iteration_nr)\n",
    "else:\n",
    "    train_images, train_labels, train_coordinates, train_modalities = preprocess_loop(train[:64], iteration_nr)\n",
    "    val_images,   val_labels,   val_coordinates,   val_modalities   = preprocess_loop(val[:64], iteration_nr)\n",
    "\n",
    "SEED = 42\n",
    "batch_size = 32 if image_size >= 384 else 64\n",
    "batch_size_val = batch_size\n",
    "\n",
    "train_ds = tf.data.Dataset.from_tensor_slices(\n",
    "    ({\"input_img\": train_images, \"input_mod\": train_modalities},\n",
    "     {\"class\": train_labels, \"reg\": train_coordinates})\n",
    ").shuffle(len(train_labels), seed=SEED).repeat().batch(batch_size, drop_remainder=True).prefetch(tf.data.AUTOTUNE)\n",
    "\n",
    "val_ds = tf.data.Dataset.from_tensor_slices(\n",
    "    ({\"input_img\": val_images, \"input_mod\": val_modalities},\n",
    "     {\"class\": val_labels, \"reg\": val_coordinates})\n",
    ").batch(batch_size_val, drop_remainder=False).prefetch(tf.data.AUTOTUNE)\n",
    "\n",
    "# ============================\n",
    "# 4) モデル定義（@register_keras_serializableで登録）\n",
    "# ============================\n",
    "label_weights = tf.constant([1,1,1,1,1,1,1,1,1,1,1,1,1,13], dtype=tf.float32)/26\n",
    "\n",
    "@tf.keras.utils.register_keras_serializable()\n",
    "class WeightedBinaryCrossentropy(tf.keras.losses.Loss):\n",
    "    def __init__(self, name=\"weighted_bce_loss\", reduction='sum_over_batch_size'):\n",
    "        super().__init__(name=name, reduction=reduction)\n",
    "        self.weight_positive = 1 - tf.reduce_sum(train_labels, axis=0)/len(train_labels)\n",
    "        self.weight_negative = tf.reduce_sum(train_labels, axis=0)/len(train_labels)\n",
    "        self.label_weights = label_weights\n",
    "    def call(self, y_true, y_pred):\n",
    "        y_true = tf.cast(y_true, tf.float32)\n",
    "        y_pred = tf.cast(y_pred, tf.float32)\n",
    "        y_pred = tf.clip_by_value(y_pred, 1e-7, 1 - 1e-7)\n",
    "        bce = -(self.weight_positive * y_true * tf.math.log(y_pred) +\n",
    "                self.weight_negative * (1 - y_true) * tf.math.log(1 - y_pred))\n",
    "        bce = bce * self.label_weights\n",
    "        return tf.reduce_mean(bce)\n",
    "\n",
    "@tf.keras.utils.register_keras_serializable()\n",
    "class LearnableRGB(tf.keras.layers.Layer):\n",
    "    def __init__(self, **kwargs): super().__init__(**kwargs)\n",
    "    def build(self, input_shape):\n",
    "        self.conv = tf.keras.layers.Conv2D(3, 1, use_bias=False, name=\"rgb_1x1\")\n",
    "    def call(self, x):\n",
    "        x = tf.cast(x, tf.float32)/255.0\n",
    "        return self.conv(x)\n",
    "\n",
    "@tf.keras.utils.register_keras_serializable()\n",
    "class PreProcess(tf.keras.layers.Layer):\n",
    "    def __init__(self, base_network_type, **kwargs):\n",
    "        super().__init__(**kwargs)\n",
    "        if base_network_type < 9:\n",
    "            self.preprocess_input = tf.keras.applications.efficientnet.preprocess_input\n",
    "        else:\n",
    "            self.preprocess_input = tf.keras.applications.efficientnet_v2.preprocess_input\n",
    "    def call(self, inputs):\n",
    "        x = tf.cast(inputs, tf.float32)\n",
    "        return self.preprocess_input(x*255.0)\n",
    "\n",
    "def _build_base_model(image_size, base_network_type=9):\n",
    "    # オフライン安全: まずローカル重み→ImageNet許可→Noneの順\n",
    "    weights_arg = 'imagenet' if USE_IMAGENET else None\n",
    "    def _make(weights):\n",
    "        return tf.keras.applications.EfficientNetV2B0(\n",
    "            include_top=False, input_shape=[image_size, image_size, 3], weights=weights\n",
    "        )\n",
    "    try:\n",
    "        if LOCAL_WEIGHTS and os.path.exists(LOCAL_WEIGHTS):\n",
    "            print(f\"Loading base model w/ local weights: {LOCAL_WEIGHTS}\")\n",
    "            m = _make(None)\n",
    "            m.load_weights(LOCAL_WEIGHTS, by_name=True, skip_mismatch=True)\n",
    "            return m\n",
    "        else:\n",
    "            try:\n",
    "                m = _make(weights_arg)  # ここでDLが必要なら、USE_IMAGENET=Falseで回避\n",
    "                return m\n",
    "            except Exception as e:\n",
    "                print(f\"[WARN] Pretrained weights not available ({e}). Using random init.\")\n",
    "                return _make(None)\n",
    "    except Exception as e:\n",
    "        print(f\"[WARN] Base model fallback to random init ({e}).\")\n",
    "        return _make(None)\n",
    "\n",
    "def build_network(hp):\n",
    "    base_network_type = 9  # EfficientNetV2B0\n",
    "    base_model = _build_base_model(image_size, base_network_type)\n",
    "    preprocessing = PreProcess(base_network_type=base_network_type, name='preprocessing')\n",
    "    base_model.trainable = True\n",
    "\n",
    "    # 入力\n",
    "    input_img = tf.keras.Input(shape=(image_size, image_size, 1), name='input_img')\n",
    "    input_mod = tf.keras.Input(shape=(2,), name='input_mod')\n",
    "\n",
    "    # 前処理・ベース\n",
    "    x = LearnableRGB(name='learnable_rgb')(input_img)\n",
    "    x = preprocessing(x)\n",
    "    x = base_model(x)\n",
    "    x = tf.keras.layers.GlobalAveragePooling2D(name='gap2d')(x)\n",
    "    x = tf.keras.layers.BatchNormalization(name='gap2d_bn')(x)\n",
    "    x = tf.keras.layers.Dropout(0.1, name='gap2d_do')(x)\n",
    "\n",
    "    # モダリティ結合\n",
    "    x = tf.keras.layers.Concatenate(name='concat_gap')([x, input_mod])\n",
    "\n",
    "    # 分類ヘッド\n",
    "    y = tf.keras.layers.Dense(512, activation=\"relu\", kernel_initializer='he_uniform', name='final_fc1')(x)\n",
    "    y = tf.keras.layers.BatchNormalization(name='final_bn1')(y)\n",
    "    y = tf.keras.layers.Dropout(0.1, name='final_do1')(y)\n",
    "    output_lab = tf.keras.layers.Dense(len(label2class.keys()), activation=\"sigmoid\", name='class', dtype='float32')(y)\n",
    "\n",
    "    # 回帰ヘッド\n",
    "    z = tf.keras.layers.Dense(256, activation=\"relu\", kernel_initializer='he_uniform', name='final_fc_reg1')(x)\n",
    "    z = tf.keras.layers.Dropout(0.1, name='final_do_reg1')(z)\n",
    "    output_coord = tf.keras.layers.Dense(2, activation=\"linear\", name='reg', dtype='float32')(z)\n",
    "\n",
    "    model = tf.keras.Model(inputs=[input_img, input_mod], outputs=[output_lab, output_coord], name='RSNA_Class')\n",
    "\n",
    "    optimizer = tf.keras.optimizers.Adam(1e-3)\n",
    "    loss_class = WeightedBinaryCrossentropy()\n",
    "    loss = {\"reg\": \"mean_squared_error\", \"class\": loss_class}\n",
    "    loss_weights = {\"reg\": 0.01, \"class\": 0.99}\n",
    "    auc = tf.keras.metrics.AUC(multi_label=True, label_weights=label_weights, name='auc')\n",
    "    metrics = {\"reg\": [\"mae\"], \"class\": [auc]}\n",
    "    model.compile(optimizer=optimizer, loss=loss, loss_weights=loss_weights, metrics=metrics, run_eagerly=False)\n",
    "    return model\n",
    "\n",
    "# ============================\n",
    "# 5) LR: Cosine+Warmup / EMA\n",
    "# ============================\n",
    "warmup_epochs = 5\n",
    "total_epochs  = 100\n",
    "base_lr = 1e-3\n",
    "min_lr  = 1e-5\n",
    "\n",
    "def cosine_warmup_lr(epoch):\n",
    "    if epoch < warmup_epochs:\n",
    "        return base_lr * (epoch + 1) / warmup_epochs\n",
    "    t = (epoch - warmup_epochs) / max(1, total_epochs - warmup_epochs)\n",
    "    return float(min_lr + 0.5*(base_lr - min_lr)*(1 + math.cos(math.pi*t)))\n",
    "lr_cb = tf.keras.callbacks.LearningRateScheduler(cosine_warmup_lr, verbose=0)\n",
    "\n",
    "class EMAWeights(tf.keras.callbacks.Callback):\n",
    "    def __init__(self, model, decay=0.999):\n",
    "        super().__init__()\n",
    "        self.decay = decay\n",
    "        self.shadow = [w.numpy() for w in model.weights]\n",
    "        self.model_ref = model\n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        for i, w in enumerate(self.model_ref.weights):\n",
    "            self.shadow[i] = self.decay*self.shadow[i] + (1.0 - self.decay)*w.numpy()\n",
    "    def on_train_end(self, logs=None):\n",
    "        for var, swa in zip(self.model_ref.weights, self.shadow):\n",
    "            var.assign(swa)\n",
    "\n",
    "# ============================\n",
    "# 6) モデルのロード/ビルド（custom_objects不要）\n",
    "# ============================\n",
    "def load_or_build_model():\n",
    "    # 1) /kaggle/working を優先\n",
    "    if os.path.exists(MODEL_PATH_WORK):\n",
    "        try:\n",
    "            m = tf.keras.models.load_model(MODEL_PATH_WORK, compile=False)\n",
    "            print(f\"Loaded model from WORKING: {MODEL_PATH_WORK}\")\n",
    "            return m\n",
    "        except Exception as e:\n",
    "            print(f\"[WARN] Failed to load WORKING model: {e}\")\n",
    "    # 2) 次に /kaggle/input\n",
    "    if os.path.exists(MODEL_PATH_INPUT):\n",
    "        try:\n",
    "            m = tf.keras.models.load_model(MODEL_PATH_INPUT, compile=False)\n",
    "            print(f\"Loaded model from INPUT: {MODEL_PATH_INPUT}\")\n",
    "            return m\n",
    "        except Exception as e:\n",
    "            print(f\"[WARN] Failed to load INPUT model: {e}\")\n",
    "    # 3) 無ければ新規構築\n",
    "    print(\"No saved model found. Building a fresh model.\")\n",
    "    with strategy.scope():\n",
    "        return build_network(kt.HyperParameters())\n",
    "\n",
    "model = load_or_build_model()\n",
    "\n",
    "# 読み込み後に compile（compile=False読み込みのため）\n",
    "optimizer = tf.keras.optimizers.Adam(1e-3)\n",
    "loss_class = WeightedBinaryCrossentropy()\n",
    "loss = {\"reg\": \"mean_squared_error\", \"class\": loss_class}\n",
    "loss_weights = {\"reg\": 0.01, \"class\": 0.99}\n",
    "auc = tf.keras.metrics.AUC(multi_label=True, label_weights=label_weights, name='auc')\n",
    "metrics = {\"reg\": [\"mae\"], \"class\": [auc]}\n",
    "model.compile(optimizer=optimizer, loss=loss, loss_weights=loss_weights, metrics=metrics, run_eagerly=False)\n",
    "\n",
    "# ============================\n",
    "# 7) 学習\n",
    "# ============================\n",
    "epochs = total_epochs\n",
    "steps_per_epoch = max(1, len(train)//batch_size)\n",
    "TRAINING = (not SUBMISSIONING)\n",
    "\n",
    "early_stopping_cb = tf.keras.callbacks.EarlyStopping(\n",
    "    patience=15, monitor='val_class_auc', mode='max', restore_best_weights=True\n",
    ")\n",
    "ema_cb = EMAWeights(model, decay=0.999)\n",
    "\n",
    "if TRAINING:\n",
    "    history = model.fit(\n",
    "        train_ds,\n",
    "        validation_data=val_ds,\n",
    "        epochs=epochs,\n",
    "        steps_per_epoch=steps_per_epoch,\n",
    "        callbacks=[lr_cb, early_stopping_cb, ema_cb],\n",
    "        verbose=1\n",
    "    )\n",
    "    # /kaggle/working に保存\n",
    "    model.save(MODEL_PATH_WORK, include_optimizer=False)\n",
    "    print(f\"Model weights have been saved to: {MODEL_PATH_WORK}\")\n",
    "\n",
    "# ============================\n",
    "# 8) しきい値最適化（任意）\n",
    "# ============================\n",
    "THRESH_FILE = os.path.join(MODEL_DIR_WORK, 'class_thresholds.npy')\n",
    "APPLY_THRESHOLDS = False  # 競技が確率提出なら False のまま\n",
    "\n",
    "def compute_optimal_thresholds(model, val_images, val_modalities, val_labels, num_points=201):\n",
    "    probs, _ = model.predict((val_images, val_modalities), verbose=0)\n",
    "    probs = np.asarray(probs); labels = np.asarray(val_labels)\n",
    "    C = probs.shape[1]; thresholds = np.zeros(C, dtype=np.float32)\n",
    "    grid = np.linspace(0.0, 1.0, num_points)\n",
    "    for c in range(C):\n",
    "        y_true = labels[:, c].astype(np.float32)\n",
    "        p = probs[:, c].astype(np.float32)\n",
    "        pos = np.sum(y_true == 1); neg = np.sum(y_true == 0)\n",
    "        if pos == 0 or neg == 0:\n",
    "            thresholds[c] = 0.5; continue\n",
    "        best_t, best_j = 0.5, -1.0\n",
    "        for t in grid:\n",
    "            yhat = (p >= t).astype(np.float32)\n",
    "            tp = np.sum((yhat == 1) & (y_true == 1))\n",
    "            fp = np.sum((yhat == 1) & (y_true == 0))\n",
    "            fn = np.sum((yhat == 0) & (y_true == 1))\n",
    "            tn = np.sum((yhat == 0) & (y_true == 0))\n",
    "            tpr = tp / (tp + fn + 1e-9); fpr = fp / (fp + tn + 1e-9)\n",
    "            j = tpr - fpr\n",
    "            if j > best_j: best_j, best_t = j, t\n",
    "        thresholds[c] = best_t\n",
    "    return thresholds\n",
    "\n",
    "if TRAINING:\n",
    "    thresholds = compute_optimal_thresholds(model, val_images, val_modalities, val_labels)\n",
    "    np.save(THRESH_FILE, thresholds)\n",
    "    print(\"Saved class-wise thresholds to:\", THRESH_FILE)\n",
    "else:\n",
    "    thresholds = np.load(THRESH_FILE) if os.path.exists(THRESH_FILE) else np.full((len(label_columns),), 0.5, dtype=np.float32)\n",
    "\n",
    "# ============================\n",
    "# 9) 推論（シリーズ集約 + しきい値適用オプション）\n",
    "# ============================\n",
    "ID_COL = 'SeriesInstanceUID'\n",
    "LABEL_COLS = list(label_columns)\n",
    "\n",
    "def aggregate_series_probs(frame_probs, k=None):\n",
    "    frame_probs = np.asarray(frame_probs)  # (T, C)\n",
    "    if k is None or k <= 1 or k > frame_probs.shape[0]:\n",
    "        return frame_probs.max(axis=0)\n",
    "    idx = np.argsort(frame_probs, axis=0)[-k:]\n",
    "    topk = np.take_along_axis(frame_probs, idx, axis=0)\n",
    "    return topk.mean(axis=0)\n",
    "\n",
    "def predict(series_path: str) -> pl.DataFrame | pd.DataFrame:\n",
    "    series_id = os.path.basename(series_path)\n",
    "    all_filepaths = []\n",
    "    for root, _, files in os.walk(series_path):\n",
    "        for file in files:\n",
    "            if file.endswith('.dcm'):\n",
    "                all_filepaths.append(os.path.join(root, file))\n",
    "    all_filepaths.sort()\n",
    "\n",
    "    image_list, mod_list = [], []\n",
    "    for image_path in all_filepaths:\n",
    "        dcm = pydicom.dcmread(image_path)\n",
    "        image = dcm.pixel_array\n",
    "        mod = encoder_mod.transform([[dcm.Modality]])\n",
    "        if len(image.shape) == 3:  # multiframe\n",
    "            for frame in image:\n",
    "                image_resized, _, _ = preprocess_images(frame, -1, -1, crop=False, augmentation=False)\n",
    "                image_list.append(tf.cast(image_resized, tf.float32))\n",
    "                mod_list.append(tf.cast(mod, tf.float32))\n",
    "        else:  # single frame\n",
    "            image_resized, _, _ = preprocess_images(image, -1, -1, crop=False, augmentation=False)\n",
    "            image_list.append(tf.cast(image_resized, tf.float32))\n",
    "            mod_list.append(tf.cast(mod, tf.float32))\n",
    "\n",
    "    test_images = tf.concat(image_list, axis=0)\n",
    "    test_mods   = tf.concat(mod_list,   axis=0)\n",
    "\n",
    "    lab, _ = model.predict((test_images, test_mods), verbose=0)  # (T, C)\n",
    "    prob_lab = aggregate_series_probs(lab, k=None)  # max集約（必要なら k=3 等に）\n",
    "\n",
    "    if APPLY_THRESHOLDS:\n",
    "        th = thresholds if 'thresholds' in globals() else np.full_like(prob_lab, 0.5)\n",
    "        out_vec = (prob_lab >= th).astype(float).tolist()\n",
    "    else:\n",
    "        out_vec = prob_lab.astype(float).tolist()\n",
    "\n",
    "    predictions = pl.DataFrame(\n",
    "        data=[[series_id] + out_vec],\n",
    "        schema=[ID_COL, *LABEL_COLS], orient='row'\n",
    "    )\n",
    "    # ディスク枯渇回避（評価サーバの暫定対処）\n",
    "    shutil.rmtree('/kaggle/shared', ignore_errors=True)\n",
    "    return predictions.drop(ID_COL)\n",
    "\n",
    "# ============================\n",
    "# 10) 提出サーバ（SUBMISSIONING=Trueのとき）\n",
    "# ============================\n",
    "if SUBMISSIONING:\n",
    "    shutil.rmtree('/kaggle/shared', ignore_errors=True)\n",
    "    inference_server = kaggle_evaluation.rsna_inference_server.RSNAInferenceServer(predict)\n",
    "    if os.getenv('KAGGLE_IS_COMPETITION_RERUN'):\n",
    "        inference_server.serve()\n",
    "    else:\n",
    "        inference_server.run_local_gateway()\n",
    "        try:\n",
    "            display(pl.read_parquet('/kaggle/working/submission.parquet'))\n",
    "        except Exception:\n",
    "            pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aed62e02",
   "metadata": {
    "papermill": {
     "duration": 0.010165,
     "end_time": "2025-10-10T02:51:25.343429",
     "exception": false,
     "start_time": "2025-10-10T02:51:25.333264",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 13851420,
     "sourceId": 99552,
     "sourceType": "competition"
    },
    {
     "sourceId": 266589125,
     "sourceType": "kernelVersion"
    }
   ],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 122.926158,
   "end_time": "2025-10-10T02:51:28.496880",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-10T02:49:25.570722",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
