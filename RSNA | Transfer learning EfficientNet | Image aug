{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ab28b4eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-10T18:22:09.475730Z",
     "iopub.status.busy": "2025-10-10T18:22:09.475473Z",
     "iopub.status.idle": "2025-10-10T18:54:21.110475Z",
     "shell.execute_reply": "2025-10-10T18:54:21.109581Z"
    },
    "papermill": {
     "duration": 1931.64046,
     "end_time": "2025-10-10T18:54:21.111782",
     "exception": false,
     "start_time": "2025-10-10T18:22:09.471322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-10-10 18:22:15.036713: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1760120535.299620      19 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1760120535.368740      19 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "I0000 00:00:1760120549.139131      19 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15513 MB memory:  -> device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0\n",
      "/usr/local/lib/python3.11/dist-packages/sklearn/model_selection/_split.py:909: UserWarning: The least populated class in y has only 2 members, which is less than n_splits=10.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "❌ Using CPU/GPU\n",
      "REPLICAS:  1\n",
      "✅ Fold 0: Train size = 4264, Val size = 475\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 84%|████████▍ | 3586/4264 [04:56<00:52, 13.00it/s]/usr/local/lib/python3.11/dist-packages/pydicom/pixels/utils.py:222: UserWarning: A value of 'None' for (0028,0008) 'Number of Frames' is invalid, assuming 1 frame\n",
      "  warn_and_log(\n",
      " 84%|████████▍ | 3585/4264 [03:59<00:43, 15.55it/s]/usr/local/lib/python3.11/dist-packages/pydicom/pixels/utils.py:222: UserWarning: A value of 'None' for (0028,0008) 'Number of Frames' is invalid, assuming 1 frame\n",
      "  warn_and_log(\n",
      " 84%|████████▍ | 3585/4264 [03:51<00:41, 16.21it/s]/usr/local/lib/python3.11/dist-packages/pydicom/pixels/utils.py:222: UserWarning: A value of 'None' for (0028,0008) 'Number of Frames' is invalid, assuming 1 frame\n",
      "  warn_and_log(\n",
      " 84%|████████▍ | 3585/4264 [03:52<00:42, 16.13it/s]/usr/local/lib/python3.11/dist-packages/pydicom/pixels/utils.py:222: UserWarning: A value of 'None' for (0028,0008) 'Number of Frames' is invalid, assuming 1 frame\n",
      "  warn_and_log(\n",
      "                                                 \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No saved model found. Building a fresh model.\n",
      "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/efficientnet_v2/efficientnetv2-b0_notop.h5\n",
      "\u001b[1m24274472/24274472\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 0us/step\n",
      "Epoch 1/100\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1760121958.161333      58 service.cc:148] XLA service 0x28bb5540 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\n",
      "I0000 00:00:1760121958.164303      58 service.cc:156]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\n",
      "I0000 00:00:1760121965.454761      58 cuda_dnn.cc:529] Loaded cuDNN version 90300\n",
      "I0000 00:00:1760122018.711978      58 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 178ms/step - class_auc: 0.5243 - class_loss: 0.0180 - loss: 0.0519 - reg_loss: 3.4136 - reg_mae: 1.4889"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "W0000 00:00:1760122035.393477      57 assert_op.cc:38] Ignoring Assert operator RSNA_Class_1/to_rgb_1/grayscale_to_rgb/assert_equal_1/Assert/Assert\n",
      "W0000 00:00:1760122035.393784      57 assert_op.cc:38] Ignoring Assert operator RSNA_Class_1/to_rgb_1/grayscale_to_rgb/assert_greater_equal/Assert/Assert\n",
      "W0000 00:00:1760122040.299866      60 assert_op.cc:38] Ignoring Assert operator RSNA_Class_1/to_rgb_1/grayscale_to_rgb/assert_equal_1/Assert/Assert\n",
      "W0000 00:00:1760122040.299910      60 assert_op.cc:38] Ignoring Assert operator RSNA_Class_1/to_rgb_1/grayscale_to_rgb/assert_greater_equal/Assert/Assert\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m156s\u001b[0m 432ms/step - class_auc: 0.5249 - class_loss: 0.0179 - loss: 0.0518 - reg_loss: 3.4075 - reg_mae: 1.4875 - val_class_auc: 0.6493 - val_class_loss: 0.0136 - val_loss: 0.0208 - val_reg_loss: 0.7355 - val_reg_mae: 0.7232 - learning_rate: 1.0000e-05\n",
      "Epoch 2/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 203ms/step - class_auc: 0.6400 - class_loss: 0.0134 - loss: 0.0342 - reg_loss: 2.0940 - reg_mae: 1.1645 - val_class_auc: 0.7104 - val_class_loss: 0.0122 - val_loss: 0.0176 - val_reg_loss: 0.5597 - val_reg_mae: 0.6397 - learning_rate: 1.2589e-05\n",
      "Epoch 3/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 202ms/step - class_auc: 0.6909 - class_loss: 0.0115 - loss: 0.0267 - reg_loss: 1.5313 - reg_mae: 0.9843 - val_class_auc: 0.7307 - val_class_loss: 0.0106 - val_loss: 0.0150 - val_reg_loss: 0.4546 - val_reg_mae: 0.5640 - learning_rate: 1.5849e-05\n",
      "Epoch 4/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 203ms/step - class_auc: 0.7304 - class_loss: 0.0100 - loss: 0.0222 - reg_loss: 1.2290 - reg_mae: 0.8795 - val_class_auc: 0.7484 - val_class_loss: 0.0093 - val_loss: 0.0134 - val_reg_loss: 0.4249 - val_reg_mae: 0.5276 - learning_rate: 1.9953e-05\n",
      "Epoch 5/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 202ms/step - class_auc: 0.7482 - class_loss: 0.0092 - loss: 0.0202 - reg_loss: 1.1060 - reg_mae: 0.8373 - val_class_auc: 0.7666 - val_class_loss: 0.0083 - val_loss: 0.0126 - val_reg_loss: 0.4430 - val_reg_mae: 0.5296 - learning_rate: 2.5119e-05\n",
      "Epoch 6/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 203ms/step - class_auc: 0.7762 - class_loss: 0.0080 - loss: 0.0177 - reg_loss: 0.9777 - reg_mae: 0.7897 - val_class_auc: 0.7785 - val_class_loss: 0.0079 - val_loss: 0.0122 - val_reg_loss: 0.4427 - val_reg_mae: 0.5283 - learning_rate: 3.1623e-05\n",
      "Epoch 7/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 202ms/step - class_auc: 0.7856 - class_loss: 0.0079 - loss: 0.0171 - reg_loss: 0.9280 - reg_mae: 0.7632 - val_class_auc: 0.8041 - val_class_loss: 0.0072 - val_loss: 0.0120 - val_reg_loss: 0.4913 - val_reg_mae: 0.5546 - learning_rate: 3.9811e-05\n",
      "Epoch 8/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 203ms/step - class_auc: 0.7971 - class_loss: 0.0073 - loss: 0.0153 - reg_loss: 0.8105 - reg_mae: 0.7099 - val_class_auc: 0.8167 - val_class_loss: 0.0070 - val_loss: 0.0114 - val_reg_loss: 0.4457 - val_reg_mae: 0.5244 - learning_rate: 5.0119e-05\n",
      "Epoch 9/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 203ms/step - class_auc: 0.8289 - class_loss: 0.0065 - loss: 0.0138 - reg_loss: 0.7281 - reg_mae: 0.6723 - val_class_auc: 0.8300 - val_class_loss: 0.0067 - val_loss: 0.0111 - val_reg_loss: 0.4485 - val_reg_mae: 0.5234 - learning_rate: 6.3096e-05\n",
      "Epoch 10/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 203ms/step - class_auc: 0.8254 - class_loss: 0.0068 - loss: 0.0134 - reg_loss: 0.6692 - reg_mae: 0.6407 - val_class_auc: 0.8333 - val_class_loss: 0.0066 - val_loss: 0.0103 - val_reg_loss: 0.3786 - val_reg_mae: 0.4873 - learning_rate: 7.9433e-05\n",
      "Epoch 11/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 203ms/step - class_auc: 0.8487 - class_loss: 0.0061 - loss: 0.0119 - reg_loss: 0.5902 - reg_mae: 0.5938 - val_class_auc: 0.8491 - val_class_loss: 0.0064 - val_loss: 0.0095 - val_reg_loss: 0.3189 - val_reg_mae: 0.4325 - learning_rate: 1.0000e-04\n",
      "Epoch 12/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 202ms/step - class_auc: 0.8529 - class_loss: 0.0060 - loss: 0.0107 - reg_loss: 0.4737 - reg_mae: 0.5278 - val_class_auc: 0.8608 - val_class_loss: 0.0064 - val_loss: 0.0091 - val_reg_loss: 0.2792 - val_reg_mae: 0.4006 - learning_rate: 1.2589e-04\n",
      "Epoch 13/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 203ms/step - class_auc: 0.8647 - class_loss: 0.0059 - loss: 0.0098 - reg_loss: 0.3890 - reg_mae: 0.4857 - val_class_auc: 0.8710 - val_class_loss: 0.0063 - val_loss: 0.0084 - val_reg_loss: 0.2223 - val_reg_mae: 0.3545 - learning_rate: 1.5849e-04\n",
      "Epoch 14/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 201ms/step - class_auc: 0.8743 - class_loss: 0.0057 - loss: 0.0087 - reg_loss: 0.3094 - reg_mae: 0.4355 - val_class_auc: 0.8700 - val_class_loss: 0.0058 - val_loss: 0.0080 - val_reg_loss: 0.2186 - val_reg_mae: 0.3518 - learning_rate: 1.9953e-04\n",
      "Epoch 15/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 202ms/step - class_auc: 0.8698 - class_loss: 0.0053 - loss: 0.0080 - reg_loss: 0.2682 - reg_mae: 0.4045 - val_class_auc: 0.8712 - val_class_loss: 0.0058 - val_loss: 0.0077 - val_reg_loss: 0.1942 - val_reg_mae: 0.3350 - learning_rate: 2.5119e-04\n",
      "Epoch 16/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 202ms/step - class_auc: 0.8918 - class_loss: 0.0052 - loss: 0.0074 - reg_loss: 0.2203 - reg_mae: 0.3622 - val_class_auc: 0.8863 - val_class_loss: 0.0062 - val_loss: 0.0086 - val_reg_loss: 0.2442 - val_reg_mae: 0.3910 - learning_rate: 3.1623e-04\n",
      "Epoch 17/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 201ms/step - class_auc: 0.9000 - class_loss: 0.0045 - loss: 0.0067 - reg_loss: 0.2198 - reg_mae: 0.3626 - val_class_auc: 0.8813 - val_class_loss: 0.0059 - val_loss: 0.0080 - val_reg_loss: 0.2113 - val_reg_mae: 0.3586 - learning_rate: 3.9811e-04\n",
      "Epoch 18/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 202ms/step - class_auc: 0.9012 - class_loss: 0.0044 - loss: 0.0062 - reg_loss: 0.1785 - reg_mae: 0.3244 - val_class_auc: 0.8903 - val_class_loss: 0.0055 - val_loss: 0.0069 - val_reg_loss: 0.1383 - val_reg_mae: 0.2453 - learning_rate: 5.0119e-04\n",
      "Epoch 19/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 201ms/step - class_auc: 0.8923 - class_loss: 0.0053 - loss: 0.0071 - reg_loss: 0.1856 - reg_mae: 0.3199 - val_class_auc: 0.8803 - val_class_loss: 0.0076 - val_loss: 0.0095 - val_reg_loss: 0.1931 - val_reg_mae: 0.2968 - learning_rate: 6.3096e-04\n",
      "Epoch 20/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 203ms/step - class_auc: 0.8952 - class_loss: 0.0060 - loss: 0.0082 - reg_loss: 0.2299 - reg_mae: 0.3511 - val_class_auc: 0.8917 - val_class_loss: 0.0062 - val_loss: 0.0082 - val_reg_loss: 0.2060 - val_reg_mae: 0.3099 - learning_rate: 7.9433e-04\n",
      "Epoch 21/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 200ms/step - class_auc: 0.8825 - class_loss: 0.0061 - loss: 0.0083 - reg_loss: 0.2287 - reg_mae: 0.3286 - val_class_auc: 0.8901 - val_class_loss: 0.0061 - val_loss: 0.0078 - val_reg_loss: 0.1712 - val_reg_mae: 0.2864 - learning_rate: 0.0010\n",
      "Epoch 22/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 202ms/step - class_auc: 0.8784 - class_loss: 0.0060 - loss: 0.0082 - reg_loss: 0.2266 - reg_mae: 0.3506 - val_class_auc: 0.9017 - val_class_loss: 0.0056 - val_loss: 0.0072 - val_reg_loss: 0.1662 - val_reg_mae: 0.2800 - learning_rate: 0.0013\n",
      "Epoch 23/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 201ms/step - class_auc: 0.8921 - class_loss: 0.0055 - loss: 0.0074 - reg_loss: 0.1915 - reg_mae: 0.3194 - val_class_auc: 0.8751 - val_class_loss: 0.0073 - val_loss: 0.0097 - val_reg_loss: 0.2415 - val_reg_mae: 0.3113 - learning_rate: 0.0016\n",
      "Epoch 24/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 201ms/step - class_auc: 0.8833 - class_loss: 0.0061 - loss: 0.0086 - reg_loss: 0.2534 - reg_mae: 0.3527 - val_class_auc: 0.8200 - val_class_loss: 0.0171 - val_loss: 0.0234 - val_reg_loss: 0.6675 - val_reg_mae: 0.4825 - learning_rate: 0.0020\n",
      "Epoch 25/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 201ms/step - class_auc: 0.8608 - class_loss: 0.0072 - loss: 0.0098 - reg_loss: 0.2657 - reg_mae: 0.3866 - val_class_auc: 0.5300 - val_class_loss: 0.0413 - val_loss: 0.2185 - val_reg_loss: 17.7944 - val_reg_mae: 2.2206 - learning_rate: 0.0025\n",
      "Epoch 26/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 201ms/step - class_auc: 0.7965 - class_loss: 0.0100 - loss: 0.0170 - reg_loss: 0.7079 - reg_mae: 0.5734 - val_class_auc: 0.8406 - val_class_loss: 0.0100 - val_loss: 0.0138 - val_reg_loss: 0.3873 - val_reg_mae: 0.5878 - learning_rate: 0.0032\n",
      "Epoch 27/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 200ms/step - class_auc: 0.8327 - class_loss: 0.0086 - loss: 0.0114 - reg_loss: 0.2882 - reg_mae: 0.4201 - val_class_auc: 0.8730 - val_class_loss: 0.0076 - val_loss: 0.0105 - val_reg_loss: 0.3002 - val_reg_mae: 0.5216 - learning_rate: 0.0040\n",
      "Epoch 28/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 200ms/step - class_auc: 0.8451 - class_loss: 0.0087 - loss: 0.0107 - reg_loss: 0.2131 - reg_mae: 0.3405 - val_class_auc: 0.7695 - val_class_loss: 0.0241 - val_loss: 0.0274 - val_reg_loss: 0.3686 - val_reg_mae: 0.5469 - learning_rate: 0.0050\n",
      "Epoch 29/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 200ms/step - class_auc: 0.8525 - class_loss: 0.0087 - loss: 0.0107 - reg_loss: 0.2042 - reg_mae: 0.3311 - val_class_auc: 0.8802 - val_class_loss: 0.0073 - val_loss: 0.0091 - val_reg_loss: 0.1971 - val_reg_mae: 0.3138 - learning_rate: 0.0063\n",
      "Epoch 30/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 200ms/step - class_auc: 0.8624 - class_loss: 0.0072 - loss: 0.0091 - reg_loss: 0.1909 - reg_mae: 0.3162 - val_class_auc: 0.8441 - val_class_loss: 0.0084 - val_loss: 0.0103 - val_reg_loss: 0.2092 - val_reg_mae: 0.3213 - learning_rate: 0.0079\n",
      "Epoch 31/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 201ms/step - class_auc: 0.8517 - class_loss: 0.0080 - loss: 0.0100 - reg_loss: 0.2110 - reg_mae: 0.3341 - val_class_auc: 0.7203 - val_class_loss: 0.0266 - val_loss: 0.0312 - val_reg_loss: 0.4944 - val_reg_mae: 0.5715 - learning_rate: 0.0100\n",
      "Epoch 32/100\n",
      "\u001b[1m66/66\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 201ms/step - class_auc: 0.8222 - class_loss: 0.0106 - loss: 0.0130 - reg_loss: 0.2559 - reg_mae: 0.3864 - val_class_auc: 0.5296 - val_class_loss: 0.1251 - val_loss: 4.1970 - val_reg_loss: 409.2485 - val_reg_mae: 12.7641 - learning_rate: 0.0126\n",
      "Model has been saved to: /kaggle/working/rsna-2xx/rsna_2_10_0_s300.keras\n"
     ]
    }
   ],
   "source": [
    "# RSNA Intracranial Aneurysm - Notebook-aligned (save & submit only customized)\n",
    "# -----------------------------------------------------------------------------\n",
    "# ◎ 変更点は「保存ファイル名」「提出設定(SUBMISSIONING)」のみ\n",
    "#    - 保存: /kaggle/working/rsna-2xx/rsna_2_10_0_s{IMAGE_SIZE}.keras へ\n",
    "#    - 読込: /kaggle/working/... -> /kaggle/input/rsna-transfer-learning-efficientnet-image-aug/rsna-2xx/... の順\n",
    "#    - SUBMISSIONING フラグで提出サーバ切替（デフォルト False）\n",
    "#\n",
    "# ◎ それ以外はノートブックの設定に合わせる\n",
    "#    - image_size=300 固定 / batch_size=64 固定\n",
    "#    - EfficientNetV2B0(weights='imagenet')\n",
    "#    - 1ch→3ch は固定処理（grayscale_to_rgb）\n",
    "#    - 学習率スケジューラ: lr = 1e-5 * 10**(epoch/10)\n",
    "#    - StratifiedGroupKFold(10fold) 先頭fold\n",
    "#    - 集約: フレーム→シリーズは max\n",
    "#    - EMA/Top-K/しきい値最適化などは使用しない\n",
    "\n",
    "import os\n",
    "import math\n",
    "import shutil\n",
    "from tqdm import tqdm\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import polars as pl\n",
    "from sklearn.preprocessing import OneHotEncoder, MinMaxScaler\n",
    "from sklearn.model_selection import StratifiedGroupKFold\n",
    "import tensorflow as tf\n",
    "import pydicom\n",
    "import kaggle_evaluation.rsna_inference_server\n",
    "\n",
    "# ============================\n",
    "# 0) 環境/パス設定（提出関連のみカスタム）\n",
    "# ============================\n",
    "SUBMISSIONING = False  # False: 学習→保存 / True: 推論サーバのみ\n",
    "\n",
    "# ノートブックは image_size=300 固定\n",
    "IMAGE_SIZE = 300\n",
    "image_size = IMAGE_SIZE\n",
    "\n",
    "# 保存/読込のパス（※ここだけカスタム：サイズ別ファイル名）\n",
    "MODEL_DIR_WORK = \"/kaggle/working/rsna-2xx\"\n",
    "MODEL_DIR_INPUT = \"/kaggle/input/rsna-transfer-learning-efficientnet-image-aug/rsna-2xx\"\n",
    "MODEL_NAME = f\"rsna_2_10_0_s{IMAGE_SIZE}.keras\"\n",
    "MODEL_PATH_WORK = os.path.join(MODEL_DIR_WORK, MODEL_NAME)\n",
    "MODEL_PATH_INPUT = os.path.join(MODEL_DIR_INPUT, MODEL_NAME)\n",
    "os.makedirs(MODEL_DIR_WORK, exist_ok=True)\n",
    "\n",
    "# 混合精度/Strategy（ノートブック準拠）\n",
    "try:\n",
    "    tpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect(tpu='local')\n",
    "    print('✅ Running on TPU ', tpu.master())\n",
    "except Exception:\n",
    "    print('❌ Using CPU/GPU')\n",
    "    tpu = None\n",
    "\n",
    "if tpu:\n",
    "    strategy = tf.distribute.TPUStrategy(tpu)\n",
    "    tf.keras.mixed_precision.set_global_policy('mixed_bfloat16')\n",
    "else:\n",
    "    strategy = tf.distribute.get_strategy()\n",
    "    try:\n",
    "        tf.keras.mixed_precision.set_global_policy('mixed_float16')\n",
    "    except Exception:\n",
    "        pass\n",
    "\n",
    "print(\"REPLICAS: \", strategy.num_replicas_in_sync)\n",
    "\n",
    "# ============================\n",
    "# 1) データ読み込みと分割（ノートブック準拠）\n",
    "# ============================\n",
    "path = '/kaggle/input/rsna-intracranial-aneurysm-detection/'\n",
    "trainval = pd.read_csv(os.path.join(path, \"train.csv\"))\n",
    "trainval_localizers = pd.read_csv(os.path.join(path, \"train_localizers.csv\"))\n",
    "trainval = trainval.merge(trainval_localizers, on='SeriesInstanceUID', how='outer')\n",
    "\n",
    "# StratifiedGroupKFold 用 多ラベル→多クラス化\n",
    "label_columns = trainval.columns[trainval.columns.str.contains('Artery|Tip|Other|Present', case=True)]\n",
    "label2class = {}\n",
    "trainval['class'] = 0\n",
    "for i, col in enumerate(label_columns[:]):\n",
    "    label2class[col] = i + 1\n",
    "    if i < 13:\n",
    "        trainval['class'] = trainval['class'] + trainval[col] * (i + 1)\n",
    "\n",
    "skf = StratifiedGroupKFold(n_splits=10, shuffle=True, random_state=33)\n",
    "for fold, (train_idx, val_idx) in enumerate(\n",
    "    skf.split(trainval, y=trainval['class'], groups=trainval['SeriesInstanceUID'])\n",
    "):\n",
    "    train = trainval.iloc[train_idx].reset_index(drop=True)\n",
    "    val   = trainval.iloc[val_idx].reset_index(drop=True)\n",
    "    print(f\"✅ Fold {fold}: Train size = {len(train_idx)}, Val size = {len(val_idx)}\")\n",
    "    break\n",
    "\n",
    "# ============================\n",
    "# 2) 画像前処理（ノートブック準拠：固定3ch化）\n",
    "# ============================\n",
    "def crop_image(image, x, y, tol=0.05, crop=True):\n",
    "    img = image[0, :, :, 0]\n",
    "    mask = img > tol\n",
    "    if crop and mask.sum() > 1000:\n",
    "        masked_idx = np.ix_(mask.any(1), mask.any(0))\n",
    "        image = img[masked_idx]\n",
    "        image = image.reshape(1, image.shape[0], image.shape[1], 1)\n",
    "    if crop and x >= 0 and mask.sum() > 1000:\n",
    "        coor = np.zeros((img.shape), dtype=float)\n",
    "        coor[round(y), round(x)] = 1\n",
    "        coor_masked = coor[masked_idx]\n",
    "        row, col = np.where(coor_masked == 1)\n",
    "        y, x = row[0], col[0]\n",
    "    return image, x, y\n",
    "\n",
    "def pad_and_resize(image, x, y):\n",
    "    _, h, w, _ = image.shape\n",
    "    pad_size = max(h, w)\n",
    "    image_padded = tf.image.resize_with_crop_or_pad(image, pad_size, pad_size)\n",
    "    image_resized = tf.image.resize(image_padded, [IMAGE_SIZE, IMAGE_SIZE], method=tf.image.ResizeMethod.BICUBIC)\n",
    "    if x >= 0:\n",
    "        coor = np.zeros((image.shape), dtype=float)\n",
    "        coor[:, round(y), round(x), :] = 1\n",
    "        coor_padded = tf.image.resize_with_crop_or_pad(coor, pad_size, pad_size)\n",
    "        coor_resized = tf.image.resize(coor_padded, [IMAGE_SIZE, IMAGE_SIZE], method=tf.image.ResizeMethod.AREA)\n",
    "        _, row, col, _ = np.where(coor_resized.numpy() == coor_resized.numpy().max())\n",
    "        y, x = row[0], col[0]\n",
    "    return image_resized, x, y\n",
    "\n",
    "def image_augmentation(image, x, y, augmentation=True):\n",
    "    if augmentation:\n",
    "        coor = np.zeros((image.shape), dtype=float)\n",
    "        zoom_fac = np.random.uniform(0.0, 0.0)  # ノートブック同様: ズーム固定\n",
    "        rot_fac = np.random.uniform(-0.1, 0.1)\n",
    "        trans_fac = np.random.uniform(-0.05, 0.05)\n",
    "        z = tf.keras.layers.RandomZoom(height_factor=(zoom_fac, zoom_fac), fill_mode='constant', name='auglay1')(image)\n",
    "        z = tf.keras.layers.RandomRotation(factor=(rot_fac, rot_fac), fill_mode='constant', name='auglay2')(z)\n",
    "        image = tf.keras.layers.RandomTranslation(\n",
    "            height_factor=(trans_fac, trans_fac), width_factor=(trans_fac, trans_fac),\n",
    "            interpolation='nearest', fill_mode='constant', name='auglay3'\n",
    "        )(z)\n",
    "        if x >= 0:\n",
    "            coor[:, round(y), round(x), :] = 1\n",
    "            coor = tf.convert_to_tensor(coor)\n",
    "            z = tf.keras.layers.RandomZoom(height_factor=(zoom_fac, zoom_fac), fill_mode='constant', name='auglay1')(coor)\n",
    "            z = tf.keras.layers.RandomRotation(factor=(rot_fac, rot_fac), fill_mode='constant', name='auglay2')(z)\n",
    "            coor = tf.keras.layers.RandomTranslation(\n",
    "                height_factor=(trans_fac, trans_fac), width_factor=(trans_fac, trans_fac),\n",
    "                interpolation='nearest', fill_mode='constant', name='auglay3'\n",
    "            )(z)\n",
    "            _, row, col, _ = np.where(coor.numpy() == coor.numpy().max())\n",
    "            y, x = row[0], col[0]\n",
    "    return image, x, y\n",
    "\n",
    "def preprocess_images(image, x, y, crop, augmentation):\n",
    "    # 0-1 -> MinMax -> 0-255 uint8（ノートブック流儀）\n",
    "    image_scaled = (MinMaxScaler().fit_transform(image.reshape(-1, 1))).reshape(1, image.shape[0], image.shape[1], 1).astype(np.float32)\n",
    "    try:\n",
    "        image_c, x_c, y_c = crop_image(image_scaled, x, y, crop=crop)\n",
    "    except Exception:\n",
    "        image_c, x_c, y_c = crop_image(image_scaled, x, y, crop=False)\n",
    "    image_aug, x_a, y_a = image_augmentation(image_c, x_c, y_c, augmentation=augmentation)\n",
    "    image_resized, x_r, y_r = pad_and_resize(image_aug, x_a, y_a)\n",
    "    image_resized = tf.cast(image_resized*255, dtype=tf.uint8)\n",
    "    if x >= 0:\n",
    "        x_rs, y_rs = x_r/IMAGE_SIZE, y_r/IMAGE_SIZE\n",
    "    else:\n",
    "        x_rs, y_rs = -1, -1\n",
    "    return image_resized, x_rs, y_rs\n",
    "\n",
    "# ============================\n",
    "# 3) データセット作成（ノートブック準拠）\n",
    "# ============================\n",
    "iteration_nr = 4\n",
    "root_path = os.path.join(path, 'series')\n",
    "encoder_mod = OneHotEncoder(handle_unknown='ignore', sparse_output=False).fit([['MR'], ['CT']])\n",
    "\n",
    "def preprocess_step(data, iter_nr):\n",
    "    image_list, modality_list, label_list, coordinates_list = [], [], [], []\n",
    "    for idx in tqdm(data.index, leave=False):\n",
    "        data_slice = data.loc[idx]\n",
    "        subfolder_path = os.path.join(root_path, data_slice['SeriesInstanceUID'])\n",
    "        files_in = sorted(os.listdir(subfolder_path))\n",
    "        file_name = files_in[iter_nr] if len(files_in) > iter_nr else files_in[-1]\n",
    "        if not pd.isna(data_slice.get('SOPInstanceUID')):\n",
    "            file_name = f\"{data_slice['SOPInstanceUID']}.dcm\"\n",
    "\n",
    "        dcm = pydicom.dcmread(os.path.join(subfolder_path, file_name))\n",
    "        try:\n",
    "            nr_frames = int(dcm.NumberOfFrames)\n",
    "            frame_nr = int(eval(data_slice['coordinates'])['f']) if data_slice['Aneurysm Present'] == 1 else min(iter_nr, nr_frames-1)\n",
    "        except Exception:\n",
    "            frame_nr = 0\n",
    "\n",
    "        # フレーム取得\n",
    "        image = (pydicom.pixels.pixel_array(dcm, index=frame_nr)\n",
    "                 if getattr(pydicom, 'pixels', None) and hasattr(pydicom, 'pixels')\n",
    "                 else dcm.pixel_array)\n",
    "\n",
    "        mod = encoder_mod.transform([[dcm.Modality]])\n",
    "        if pd.isna(data_slice.get('coordinates')):\n",
    "            x, y = -1, -1\n",
    "        else:\n",
    "            xy = eval(data_slice['coordinates']); x, y = xy['x'], xy['y']\n",
    "\n",
    "        image_resized, x_rs, y_rs = preprocess_images(\n",
    "            image, x, y, crop=False, augmentation=(iter_nr > 0 and data_slice['Aneurysm Present'] == 1)\n",
    "        )\n",
    "        coordinates_tensor = tf.expand_dims(tf.convert_to_tensor([x_rs, y_rs], dtype=np.float32), 0)\n",
    "        image_list.append(image_resized)\n",
    "        modality_list.append(mod)\n",
    "        coordinates_list.append(coordinates_tensor)\n",
    "\n",
    "        labels = data_slice[label_columns]\n",
    "        label_tensor = tf.expand_dims(tf.convert_to_tensor(labels, dtype=np.float32), 0)\n",
    "        label_list.append(label_tensor)\n",
    "\n",
    "    images = tf.concat(image_list, axis=0)\n",
    "    modalities = tf.concat(modality_list, axis=0)\n",
    "    labels = tf.concat(label_list, axis=0)\n",
    "    coordinates = tf.concat(coordinates_list, axis=0)\n",
    "    return images, labels, coordinates, modalities\n",
    "\n",
    "def preprocess_loop(data, iteration_nr):\n",
    "    data_images_list, data_modalities_list, data_labels_list, data_coordinates_list = [], [], [], []\n",
    "    for i in range(iteration_nr):\n",
    "        di, dl, dc, dm = preprocess_step(data, i)\n",
    "        data_images_list.append(di); data_modalities_list.append(dm)\n",
    "        data_labels_list.append(dl); data_coordinates_list.append(dc)\n",
    "    data_images = tf.concat(data_images_list, axis=0)\n",
    "    data_modalities = tf.concat(data_modalities_list, axis=0)\n",
    "    data_labels = tf.concat(data_labels_list, axis=0)\n",
    "    data_coordinates = tf.concat(data_coordinates_list, axis=0)\n",
    "    return data_images, data_labels, data_coordinates, data_modalities\n",
    "\n",
    "if not SUBMISSIONING:\n",
    "    train_images, train_labels, train_coordinates, train_modalities = preprocess_loop(train[:], iteration_nr)\n",
    "    val_images,   val_labels,   val_coordinates,   val_modalities   = preprocess_loop(val[:], iteration_nr)\n",
    "else:\n",
    "    # 提出時の軽量化（開発補助）\n",
    "    train_images, train_labels, train_coordinates, train_modalities = preprocess_loop(train[:64], iteration_nr)\n",
    "    val_images,   val_labels,   val_coordinates,   val_modalities   = preprocess_loop(val[:64], iteration_nr)\n",
    "\n",
    "SEED = 42\n",
    "batch_size = 64  # ノートブック固定\n",
    "batch_size_val = batch_size\n",
    "\n",
    "# grayscale->RGB（ノートブックは固定写像）\n",
    "def grayscale_to_rgb_uint8(x):\n",
    "    # x: (B,H,W,1) uint8\n",
    "    x = tf.cast(x, tf.float32)  # [0,255]\n",
    "    rgb = tf.image.grayscale_to_rgb(x)  # (B,H,W,3)\n",
    "    return tf.cast(rgb, tf.uint8)\n",
    "\n",
    "train_ds = tf.data.Dataset.from_tensor_slices(\n",
    "    ({\"input_img\": train_images, \"input_mod\": train_modalities},\n",
    "     {\"class\": train_labels, \"reg\": train_coordinates})\n",
    ").shuffle(len(train_labels), seed=SEED).repeat().batch(batch_size, drop_remainder=True).prefetch(tf.data.AUTOTUNE)\n",
    "\n",
    "val_ds = tf.data.Dataset.from_tensor_slices(\n",
    "    ({\"input_img\": val_images, \"input_mod\": val_modalities},\n",
    "     {\"class\": val_labels, \"reg\": val_coordinates})\n",
    ").batch(batch_size_val, drop_remainder=False).prefetch(tf.data.AUTOTUNE)\n",
    "\n",
    "# ============================\n",
    "# 4) モデル定義（ノートブック準拠）\n",
    "# ============================\n",
    "label_weights = tf.constant([1,1,1,1,1,1,1,1,1,1,1,1,1,13], dtype=tf.float32)/26\n",
    "\n",
    "@tf.keras.utils.register_keras_serializable()\n",
    "class WeightedBinaryCrossentropy(tf.keras.losses.Loss):\n",
    "    def __init__(self, name=\"weighted_bce_loss\", reduction='sum_over_batch_size'):\n",
    "        super().__init__(name=name, reduction=reduction)\n",
    "        self.weight_positive = 1 - tf.reduce_sum(train_labels, axis=0)/len(train_labels)\n",
    "        self.weight_negative = tf.reduce_sum(train_labels, axis=0)/len(train_labels)\n",
    "        self.label_weights = label_weights\n",
    "    def call(self, y_true, y_pred):\n",
    "        y_true = tf.cast(y_true, tf.float32)\n",
    "        y_pred = tf.cast(y_pred, tf.float32)\n",
    "        y_pred = tf.clip_by_value(y_pred, 1e-7, 1 - 1e-7)\n",
    "        bce = -(self.weight_positive * y_true * tf.math.log(y_pred) +\n",
    "                self.weight_negative * (1 - y_true) * tf.math.log(1 - y_pred))\n",
    "        bce = bce * self.label_weights\n",
    "        return tf.reduce_mean(bce)\n",
    "\n",
    "@tf.keras.utils.register_keras_serializable()\n",
    "class PreProcess(tf.keras.layers.Layer):\n",
    "    # ノートブックは EfficientNetV2 の preprocess_input を使用\n",
    "    def __init__(self, **kwargs):\n",
    "        super().__init__(**kwargs)\n",
    "        self.preprocess_input = tf.keras.applications.efficientnet_v2.preprocess_input\n",
    "    def call(self, inputs):\n",
    "        # 入力は uint8 [0,255] 想定\n",
    "        x = tf.cast(inputs, tf.float32)\n",
    "        return self.preprocess_input(x)\n",
    "\n",
    "def build_model():\n",
    "    base_model = tf.keras.applications.EfficientNetV2B0(\n",
    "        include_top=False,\n",
    "        input_shape=[IMAGE_SIZE, IMAGE_SIZE, 3],\n",
    "        weights='imagenet'  # ノートブック準拠\n",
    "    )\n",
    "    base_model.trainable = True\n",
    "\n",
    "    input_img = tf.keras.Input(shape=(IMAGE_SIZE, IMAGE_SIZE, 1), name='input_img', dtype='uint8')\n",
    "    input_mod = tf.keras.Input(shape=(2,), name='input_mod')\n",
    "\n",
    "    # 固定の 1ch -> 3ch 変換（ノートブック準拠）\n",
    "    x = tf.keras.layers.Lambda(grayscale_to_rgb_uint8, name='to_rgb')(input_img)\n",
    "    x = PreProcess(name='preprocessing')(x)\n",
    "    x = base_model(x)\n",
    "    x = tf.keras.layers.GlobalAveragePooling2D(name='gap2d')(x)\n",
    "    x = tf.keras.layers.BatchNormalization(name='gap2d_bn')(x)\n",
    "    x = tf.keras.layers.Dropout(0.1, name='gap2d_do')(x)\n",
    "\n",
    "    x = tf.keras.layers.Concatenate(name='concat_gap')([x, input_mod])\n",
    "\n",
    "    y = tf.keras.layers.Dense(512, activation=\"relu\", kernel_initializer='he_uniform', name='final_fc1')(x)\n",
    "    y = tf.keras.layers.BatchNormalization(name='final_bn1')(y)\n",
    "    y = tf.keras.layers.Dropout(0.1, name='final_do1')(y)\n",
    "    output_lab = tf.keras.layers.Dense(len(label2class.keys()), activation=\"sigmoid\", name='class', dtype='float32')(y)\n",
    "\n",
    "    z = tf.keras.layers.Dense(256, activation=\"relu\", kernel_initializer='he_uniform', name='final_fc_reg1')(x)\n",
    "    z = tf.keras.layers.Dropout(0.1, name='final_do_reg1')(z)\n",
    "    output_coord = tf.keras.layers.Dense(2, activation=\"linear\", name='reg', dtype='float32')(z)\n",
    "\n",
    "    model = tf.keras.Model(inputs=[input_img, input_mod], outputs=[output_lab, output_coord], name='RSNA_Class')\n",
    "\n",
    "    optimizer = tf.keras.optimizers.Adam(1e-3)\n",
    "    loss_class = WeightedBinaryCrossentropy()\n",
    "    loss = {\"reg\": \"mean_squared_error\", \"class\": loss_class}\n",
    "    loss_weights = {\"reg\": 0.01, \"class\": 0.99}\n",
    "    auc = tf.keras.metrics.AUC(multi_label=True, label_weights=label_weights, name='auc')\n",
    "    metrics = {\"reg\": [\"mae\"], \"class\": [auc]}\n",
    "    model.compile(optimizer=optimizer, loss=loss, loss_weights=loss_weights, metrics=metrics, run_eagerly=False)\n",
    "    return model\n",
    "\n",
    "# ============================\n",
    "# 5) LR スケジューラ（ノートブックの上げ方）\n",
    "# ============================\n",
    "def lr_schedule(epoch):\n",
    "    # 1e-5 * 10**(epoch/10)\n",
    "    return 1e-5 * (10 ** (epoch / 10.0))\n",
    "lr_cb = tf.keras.callbacks.LearningRateScheduler(lr_schedule, verbose=0)\n",
    "\n",
    "# ============================\n",
    "# 6) モデルのロード/ビルド（保存先だけカスタム）\n",
    "# ============================\n",
    "def load_or_build_model():\n",
    "    custom = {\"WeightedBinaryCrossentropy\": WeightedBinaryCrossentropy, \"PreProcess\": PreProcess}\n",
    "    if os.path.exists(MODEL_PATH_WORK):\n",
    "        try:\n",
    "            m = tf.keras.models.load_model(MODEL_PATH_WORK, custom_objects=custom, compile=False)\n",
    "            print(f\"Loaded model from WORKING: {MODEL_PATH_WORK}\")\n",
    "            return m\n",
    "        except Exception as e:\n",
    "            print(f\"[WARN] Failed to load WORKING model: {e}\")\n",
    "    if os.path.exists(MODEL_PATH_INPUT):\n",
    "        try:\n",
    "            m = tf.keras.models.load_model(MODEL_PATH_INPUT, custom_objects=custom, compile=False)\n",
    "            print(f\"Loaded model from INPUT: {MODEL_PATH_INPUT}\")\n",
    "            return m\n",
    "        except Exception as e:\n",
    "            print(f\"[WARN] Failed to load INPUT model: {e}\")\n",
    "    print(\"No saved model found. Building a fresh model.\")\n",
    "    with strategy.scope():\n",
    "        return build_model()\n",
    "\n",
    "model = load_or_build_model()\n",
    "\n",
    "# 再コンパイル（load_model 時 compile=False）\n",
    "optimizer = tf.keras.optimizers.Adam(1e-3)\n",
    "loss_class = WeightedBinaryCrossentropy()\n",
    "loss = {\"reg\": \"mean_squared_error\", \"class\": loss_class}\n",
    "loss_weights = {\"reg\": 0.01, \"class\": 0.99}\n",
    "auc = tf.keras.metrics.AUC(multi_label=True, label_weights=label_weights, name='auc')\n",
    "metrics = {\"reg\": [\"mae\"], \"class\": [auc]}\n",
    "model.compile(optimizer=optimizer, loss=loss, loss_weights=loss_weights, metrics=metrics, run_eagerly=False)\n",
    "\n",
    "# ============================\n",
    "# 7) 学習（ノートブック準拠；EarlyStopping on val_class_auc）\n",
    "# ============================\n",
    "epochs = 100  # ノートブック想定\n",
    "steps_per_epoch = max(1, len(train)//batch_size)\n",
    "TRAINING = (not SUBMISSIONING)\n",
    "\n",
    "early_stopping_cb = tf.keras.callbacks.EarlyStopping(\n",
    "    patience=10, monitor='val_class_auc', mode='max', restore_best_weights=True\n",
    ")\n",
    "\n",
    "if TRAINING:\n",
    "    history = model.fit(\n",
    "        train_ds,\n",
    "        validation_data=val_ds,\n",
    "        epochs=epochs,\n",
    "        steps_per_epoch=steps_per_epoch,\n",
    "        callbacks=[lr_cb, early_stopping_cb],\n",
    "        verbose=1\n",
    "    )\n",
    "    # ★ 保存先だけカスタム（サイズ別ファイル名）\n",
    "    model.save(MODEL_PATH_WORK, include_optimizer=False)\n",
    "    print(f\"Model has been saved to: {MODEL_PATH_WORK}\")\n",
    "\n",
    "# ============================\n",
    "# 8) 推論（シリーズ集約：max のみ／ノートブック準拠）\n",
    "# ============================\n",
    "ID_COL = 'SeriesInstanceUID'\n",
    "LABEL_COLS = list(label_columns)\n",
    "\n",
    "def aggregate_series_probs_max(frame_probs):\n",
    "    frame_probs = np.asarray(frame_probs)  # (T, C)\n",
    "    return frame_probs.max(axis=0)\n",
    "\n",
    "def predict(series_path: str) -> pl.DataFrame | pd.DataFrame:\n",
    "    series_id = os.path.basename(series_path)\n",
    "    all_filepaths = []\n",
    "    for root, _, files in os.walk(series_path):\n",
    "        for file in files:\n",
    "            if file.endswith('.dcm'):\n",
    "                all_filepaths.append(os.path.join(root, file))\n",
    "    all_filepaths.sort()\n",
    "\n",
    "    image_list, mod_list = [], []\n",
    "    for image_path in all_filepaths:\n",
    "        dcm = pydicom.dcmread(image_path)\n",
    "        image = dcm.pixel_array\n",
    "        mod = encoder_mod.transform([[dcm.Modality]])\n",
    "        if len(image.shape) == 3:  # multiframe\n",
    "            for frame in image:\n",
    "                image_resized, _, _ = preprocess_images(frame, -1, -1, crop=False, augmentation=False)\n",
    "                image_list.append(tf.cast(image_resized, tf.float32))\n",
    "                mod_list.append(tf.cast(mod, tf.float32))\n",
    "        else:  # single frame\n",
    "            image_resized, _, _ = preprocess_images(image, -1, -1, crop=False, augmentation=False)\n",
    "            image_list.append(tf.cast(image_resized, tf.float32))\n",
    "            mod_list.append(tf.cast(mod, tf.float32))\n",
    "\n",
    "    test_images = tf.concat(image_list, axis=0)\n",
    "    test_mods   = tf.concat(mod_list,   axis=0)\n",
    "\n",
    "    lab, _ = model.predict((test_images, test_mods), verbose=0)  # (T, C)\n",
    "    prob_lab = aggregate_series_probs_max(lab)\n",
    "\n",
    "    out_vec = prob_lab.astype(float).tolist()\n",
    "    predictions = pl.DataFrame(\n",
    "        data=[[series_id] + out_vec],\n",
    "        schema=[ID_COL, *LABEL_COLS], orient='row'\n",
    "    )\n",
    "    shutil.rmtree('/kaggle/shared', ignore_errors=True)\n",
    "    return predictions.drop(ID_COL)\n",
    "\n",
    "# ============================\n",
    "# 9) 提出サーバ（提出設定のみカスタム）\n",
    "# ============================\n",
    "if SUBMISSIONING:\n",
    "    shutil.rmtree('/kaggle/shared', ignore_errors=True)\n",
    "    inference_server = kaggle_evaluation.rsna_inference_server.RSNAInferenceServer(predict)\n",
    "    if os.getenv('KAGGLE_IS_COMPETITION_RERUN'):\n",
    "        inference_server.serve()\n",
    "    else:\n",
    "        inference_server.run_local_gateway()\n",
    "        try:\n",
    "            display(pl.read_parquet('/kaggle/working/submission.parquet'))\n",
    "        except Exception:\n",
    "            pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5723ef0e",
   "metadata": {
    "papermill": {
     "duration": 0.387194,
     "end_time": "2025-10-10T18:54:21.887769",
     "exception": false,
     "start_time": "2025-10-10T18:54:21.500575",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "databundleVersionId": 13851420,
     "sourceId": 99552,
     "sourceType": "competition"
    }
   ],
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1940.121319,
   "end_time": "2025-10-10T18:54:25.612181",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-10T18:22:05.490862",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
